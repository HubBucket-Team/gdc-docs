## Getting Started

### Getting Started

#### The GDC Application Programming Interface (API): An Overview
The GDC API drives the GDC Data and Submission Portals. It is made available to external users for programmatic access to the functionality provided by the portals. This includes searching for, downloading, and submitting data and metadata.

The GDC API uses JSON as its communication format, and standard HTTP methods like `GET`, `PUT`, `POST` and `DELETE`.

#### Tools for communicating with the GDC API

Many third-party tools can be used for communicating with the GDC API and for preparing and visualizing API calls. The following is a non-exhaustive list.

Tools for communicating with the GDC API:

+---------------------------------------------------------------------+-----------------------------------+
| Tool                                                                | Type                              |
+=====================================================================+===================================+
| [Curl](http://curl.haxx.se/docs/manpage.html)                       | Command line tool                 |
+---------------------------------------------------------------------+-----------------------------------+
| [HTTPie](http://httpie.org)                                         | Command line tool                 |
+---------------------------------------------------------------------+-----------------------------------+
| [Postman REST Client](http://www.getpostman.com/)                   | App for Google Chrome and OS X    |
+---------------------------------------------------------------------+-----------------------------------+
| [DHC REST Client](http://restlet.com/products/dhc/)                 | Google Chrome extension           |
+---------------------------------------------------------------------+-----------------------------------+
| [Google Chrome](http://www.google.com/chrome/)                      | Google Chrome web browser         |
+---------------------------------------------------------------------+-----------------------------------+

Tools that can help build GDC API calls:

+----------------------------------------------------------------------------+----------------------------+
| Tool                                                                       | Description                |
+============================================================================+============================+
| [JSONLint](http://jsonlint.com/)                                           | Validate JSON strings      |
+----------------------------------------------------------------------------+----------------------------+
| [Percent-(URL)-encoding                                                    | Tool for percent-encoding  |
| tool](http://text-rescue.com/string-escape/percent-url-encoding-tool.html) | strings                    |
+----------------------------------------------------------------------------+----------------------------+
| [JSON escape                                                               | Tool for escaping strings  |
| tool](http://text-rescue.com/string-escape/json-escape-tool.html)          | using JSON string rules    |
+----------------------------------------------------------------------------+----------------------------+

**Note:** See Appendix C for examples of using these tools.


#### API Endpoints

Communicating with the GDC API involves making calls to API endpoints. Each GDC API endpoint represents specific API functionality, as summarized in the following table:

+-------------+-----------------+----------------------------------------------------------------------------+
| Endpoint    | Type            | Description                                                                |
+=============+=================+============================================================================+
| status      | Status          | Get the API status and version information                                 |
+-------------+-----------------+----------------------------------------------------------------------------+
| projects    | Search &        | Search all data generated by a project                                     |
|             | Retrieval       |                                                                            |
+-------------+-----------------+----------------------------------------------------------------------------+
| cases       | Search &        | Find all files related to a specific case, or sample donor.                |
|             | Retrieval       |                                                                            |
+-------------+-----------------+----------------------------------------------------------------------------+
| files       | Search &        | Find all files with specific characteristics such as file_name, md5sum,    |
|             | Retrieval       | data_format and others.                                                    |
+-------------+-----------------+----------------------------------------------------------------------------+
| annotations | Search &        | Search annotations added to data after curation                            |
|             | Retrieval       |                                                                            |
+-------------+-----------------+----------------------------------------------------------------------------+
| data        | Download        | Used to download GDC data                                                  |
+-------------+-----------------+----------------------------------------------------------------------------+
| slicing     | BAM Slicing     | Allows remote slicing of BAM format objects                                |
+-------------+-----------------+----------------------------------------------------------------------------+
| submission  | Submission      | Returns the available resources at the top level above programs i.e.,      |
|             |                 | registered programs                                                        |
+-------------+-----------------+----------------------------------------------------------------------------+

The HTTP URL that corresponds to the latest version of a GDC API endpoint is `https://gdc-api.nci.nih.gov/<endpoint>`, where `<endpoint>` is the name of the endpoint.

The HTTP URL of an endpoint corresponding to a specific major version of the GDC API is `https://gdc-api.nci.nih.gov/<version>/<endpoint>`, where `<endpoint>` is the name of the endpoint and `<version>` is the GDC API version.

For example, the address of the latest version of the `status` endpoint is `https://gdc-api.nci.nih.gov/status`, whereas the address of the `status` endpoint corresponding to version 0 of GDC API is `https://gdc-api.nci.nih.gov/v0/status`.



#### Making a request to the GDC API

The `status` endpoint provides information about the current status and version of the GDC API. The following are two examples of calling the status endpoint:


``` shell
    curl https://gdc-api.nci.nih.gov/status
```

``` python
	import requests
	import json

	status_endpt = 'https://gdc-api.nci.nih.gov/status'
	response = requests.get(status_endpt)
	print json.dumps(response.json(), indent=2)
```

Either of the above two commands returns an output similar to this:

	{
	      "status": "OK",
	      "tag": "0.2.13-spr4",
	      "version": 1
	}


#### Request Headers
The GDC API supports the following request headers:

+--------------+------------------------------------------------------------------------------------------+
| Request      | Description                                                                              |
| Header       |                                                                                          |
+==============+==========================================================================================+
| Content-Type | Format of the request that the user is providing to the GDC API: `application/json` or   |
|              | `application/xml`.                                                                       |
+--------------+------------------------------------------------------------------------------------------+
| Accept       | Format of the response that the user expects from the GDC API: `application/json` or     |
|              | `application/xml`.                                                                       |
+--------------+------------------------------------------------------------------------------------------+
| X-Auth-Token | The submitterâ€™s authorization token as provided by the GDC Authorization API. This is    |
|              | the information that authenticates and authorizes the user to download controlled data   |
|              | or submit data. See [Obtaining a Token](#controlled-data-access)                         |
+--------------+------------------------------------------------------------------------------------------+


#### Response Headers
The API provides the following response headers

+-----------------+---------------------------------------------------------------------------------------+
| Response Header | Description                                                                           |
+=================+=======================================================================================+
| Content-Type    | `application/json` or `application/xml`; determined by Accept header of the           |
|                 | corresponding request.                                                                |
+-----------------+---------------------------------------------------------------------------------------+


#### Status Codes
The GDC API can respond with the following HTTP codes:

+----------------------------+----------------------------------------------------------------------------+
| Status Code                | Description                                                                |
+============================+============================================================================+
| 200 OK                     | Success                                                                    |
+----------------------------+----------------------------------------------------------------------------+
| 400 Bad Request            | An entity or element of the query was not valid                            |
+----------------------------+----------------------------------------------------------------------------+
| 403 Forbidden              | Unauthorized request                                                       |
+----------------------------+----------------------------------------------------------------------------+
| 404 Not Found              | Requested element not found                                                |
+----------------------------+----------------------------------------------------------------------------+

## Authentication and Authorization

### Authentication and Authorization

The GDC API provides access to open-access data without authentication. Submitting data to the GDC and downloading controlled-access data requires authentication and appropriate authorization.

#### Authorization

Authorization for downloading controlled-access data or for submitting data to the GDC is obtained via dbGaP. See [Obtaining Access to Controlled Data](https://gdc-dev.nci.nih.gov/access-data/obtaining-access-controlled-data) and [Obtaining Access to Submit Data](https://gdc.nci.nih.gov/submit-data/obtaining-access-submit-data) for instructions on getting the appropriate authorization.

#### Authentication

##### About Authentication Tokens

To perform functions for which authorization is required, the GDC API requires users to authenticate using a token generated using the [GDC Data Portal](https://gdc-portal.nci.nih.gov) or the [GDC Data Submission Portal](https://gdc-portal.nci.nih.gov/submission). Users can obtain authentication tokens only after receiving appropriate authorization via dbGaP.

![GDC Login and Download Token Dropdown Menu](/Users/FGerthoffert/GitHub/gdc-docs/site/API/Users_Guide/images/03-01__GDC_Login_and_Download_Token_Dropdown_Menu.png)

Tokens are alphanumeric strings of characters like this one:

	ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTO

##### Using a Token

A token must be passed to the GDC API with each request that requires authorizationFor transactions that require authorization, each request submitted to the GDC API must include an `X-Auth-Token` custom header.


###### Example: Downloading Controlled Data

In the following example, the token is saved as an environment variable and passed to `curl`, making it easy to re-use the token:

``` shell
export token=ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTO

curl -O -J -H "X-Auth-Token: $token" 'https://gdc-api.nci.nih.gov/data/a1c1b23b-cc41-4e85-b1b7-62a42873c5af'
```
```Output
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 31.4M  100 31.4M    0     0   290k      0  0:01:50  0:01:50 --:--:--  172k
curl: Saved to filename 'ACOLD_p_TCGA_Batch17_SNP_N_GenomeWideSNP_6_A03_466078.tangent.copynumber.data.txt'
```


##### Token Expiration

Tokens are valid for 90 days from the time of download.

Any request to the GDC API that uses an expired token will fail and receive an HTTP error response.

## Search and Retrieval

### Search and Retrieval

#### Constructing Queries

API queries for selecting, filtering, and sorting GDC data and metadata are constructed using [endpoints](#query-endpoints), [parameters](#query-parameters), and [filtering operators](#filtering-operators). These queries work only on datasets that have been released to the GDC Data Portal.

Data that is in the process of being submitted to GDC and is only available on the GDC Submission Portal cannot be queried using these methods. See Submission for information on how data submitters can query their unreleased data using GraphQL.

#### Query Endpoints
The following search and retrieval endpoints are available on the GDC API:

+------------------+--------------------------------------------------------------------------------------+
| Endpoints        | Description                                                                          |
+==================+======================================================================================+
| files            | Information about files stored in the GDC                                            |
+------------------+--------------------------------------------------------------------------------------+
| cases            | Information related to cases, or sample donors.                                      |
+------------------+--------------------------------------------------------------------------------------+
| projects         | Information about projects                                                           |
+------------------+--------------------------------------------------------------------------------------+
| annotations      | Information about annotations to GDC data                                            |
+------------------+--------------------------------------------------------------------------------------+
| \_mapping        | Information about elements that can be used to query other endpoints                 |
+------------------+--------------------------------------------------------------------------------------+

##### Project Endpoint
The GDC Project Endpoint `https://gdc-api.nci.nih.gov/projects` provides overall access to all the data served by GDC organized by Project such project(study) name, program,disease, primary site and state.

###### Example
This example is a query for projects contained in the GDC. It uses the [from](#from), [size](#size), [sort](#sort), and [pretty](#pretty) parameters, and returns the first two projects sorted by project id.

```shell
curl 'https://gdc-api.nci.nih.gov/projects?from=1&size=2&sort=project.project_id:asc&pretty=true'
```
``` Output

	{
	  "data": {
	    "hits": [
	      {
	        "state": "legacy",
	        "project_id": "TCGA-ACC",
	        "primary_site": "Adrenal Gland",
	        "disease_type": "Adrenocortical Carcinoma",
	        "name": "Adrenocortical Carcinoma"
	      },
	      {
	        "dbgap_accession_number": "phs000464",
	        "disease_type": "Acute Lymphoblastic Leukemia",
	        "state": "legacy",
	        "primary_site": "Blood",
	        "project_id": "TARGET-ALL-P2",
	        "name": "Acute Lymphoblastic Leukemia - Phase II"
	      }
	    ],
	    "pagination": {
	      "count": 2,
	      "sort": "project.project_id:asc",
	      "from": 1,
	      "pages": 22,
	      "total": 44,
	      "page": 1,
	      "size": 2
	    }
	  },
	  "warnings": {}
	}
```

##### Files Endpoint

The GDC Files Endpoint `https://gdc-api.nci.nih.gov/files` enables search and retrieval of information relating to files stored in the GDC, including file properties such as `file_name`, `md5sum`, `data_format`, and others.

###### Example

This example is a query for files contained in the GDC. It uses the [from](#from), [size](#size), [sort](#sort), and [pretty](#pretty) parameters, and returns only the first two files, sorted by file size, from smallest to largest.

```shell
curl 'https://gdc-api.nci.nih.gov/files?from=1&size=2&sort=file_size:asc&pretty=true'
```
``` Output
	{
	  "data": {
	    "hits": [
	      {
	        "origin": "migrated",
	        "data_type": "Raw microarray data",
	        "platform": "HG-U133_Plus_2",
	        "file_name": "TCGA-AB-2842-03A-01R-0757-21.CEL.README",
	        "md5sum": "56f9a6d58b450bf7e9f6431a86220b9d",
	        "data_format": "CEL",
	        "acl": "open",
	        "access": "open",
	        "uploaded_datetime": 1425340539,
	        "state": "live",
	        "data_subtype": "Raw intensities",
	        "file_id": "ca13321c-02aa-4141-bdb6-84d31e3c5711",
	        "file_size": 43,
	        "experimental_strategy": "Gene expression array"
	      },
	      {
	        "origin": "migrated",
	        "data_type": "Raw microarray data",
	        "platform": "HG-U133_Plus_2",
	        "file_name": "TCGA-AB-2809-03A-01R-0757-21.CEL.README",
	        "md5sum": "56f9a6d58b450bf7e9f6431a86220b9d",
	        "data_format": "CEL",
	        "acl": "open",
	        "access": "open",
	        "uploaded_datetime": 1425340539,
	        "state": "live",
	        "data_subtype": "Raw intensities",
	        "file_id": "299d500b-49e2-4c62-9111-c0691592dce1",
	        "file_size": 43,
	        "experimental_strategy": "Gene expression array"
	      }
	    ],
	    "pagination": {
	      "count": 2,
	      "sort": "file_size:asc",
	      "from": 1,
	      "pages": 300936,
	      "total": 601872,
	      "page": 1,
	      "size": 2
	    }
	  },
	  "warnings": {}
	}
```

##### Cases Endpoint

The GDC Cases Endpoint `https://gdc-api.nci.nih.gov/cases` enables search and retrieval of information related to a specific case, or sample donor.


###### Example

This example is a query for files contained in GDC. It returns case where submitter id is `TCGA-BH-A0EA`, using the [pretty](#pretty) and [filters](#filters) parameters and the following [filtering operators](#filtering-operators):

	{"op":"and","content":[{"op":"in","content":{"field":"submitter_id","value":["TCGA-BH-A0EA"]}}]}

Command:

```shell
curl 'https://gdc-api.nci.nih.gov/cases?filters=%7B%22op%22%3A%22and%22%2C%22content%22%3A%5B%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22submitter_id%22%2C%22value%22%3A%5B%22TCGA-BH-A0EA%22%5D%7D%7D%5D%7D%0A%0A&pretty=true'

```
``` Output

	{
	  "data": {
	    "hits": [
	      {
	        "sample_ids": "7f791228-dd77-4ab0-8227-d784a4c7fea1",
	        "portion_ids": "8629bf5a-cdaf-4f6a-90bb-27dd4a7565c5",
	        "submitter_portion_ids": "TCGA-BH-A0EA-01A-21-A13C-20",
	        "submitter_aliquot_ids": "TCGA-BH-A0EA-01A-11D-A10Y-09",
	        "days_to_index": 0,
	        "submitter_analyte_ids": "TCGA-BH-A0EA-01A-11D",
	        "analyte_ids": "66ed0f86-5ca5-4dec-ba76-7ee4dcf31831",
	        "submitter_id": "TCGA-BH-A0EA",
	        "case_id": "1f601832-eee3-48fb-acf5-80c4a454f26e",
	        "slide_ids": "90154ea1-6b76-4445-870e-d531d6fa1239",
	        "submitter_sample_ids": "TCGA-BH-A0EA-01A",
	        "aliquot_ids": "561b8777-801a-49ed-a306-e7dafeb044b6",
	        "submitter_slide_ids": "TCGA-BH-A0EA-01A-01-TSA"
	      }
	    ],
	    "pagination": {
	      "count": 1,
	      "sort": "",
	      "from": 1,
	      "pages": 1,
	      "total": 1,
	      "page": 1,
	      "size": 10
	    }
	  },
	  "warnings": {}
	}
```

##### Annotations Endpoint

The GDC Annotation Endpoint `https://gdc-api.nci.nih.gov/annotations` enables search and retrieval of annotations stored in the GDC.


###### Example

This example is a query for Annotations contained in the GDC. It uses the [from](#from), [size](#size), and [pretty](#pretty) parameters, and returns the first two annotations.

```shell
curl 'https://gdc-api.nci.nih.gov/annotations?from=1&size=2&pretty=true'
```
``` Output

	{
	  "data": {
	    "hits": [
	      {
	        "category": "Item flagged DNU",
	        "status": "Approved",
	        "entity_id": "2b61b856-b988-43ca-8dc5-9f97600118ec",
	        "classification": "CenterNotification",
	        "entity_type": "aliquot",
	        "created_datetime": 1294525038,
	        "annotation_id": "7d01080f-e82d-5e58-98a6-910c041ee2b3",
	        "notes": "SDRF in broad.mit.edu_READ.Genome_Wide_SNP_6.mage-tab.1.1003.0 flagged aliquot to be excluded for analysis based on file 'SCENA_p_TCGAb29and30_SNP_N_GenomeWideSNP_6_C04_569122.ismpolish.data.txt'.",
	        "creator": "DCC",
	        "submitter_id": "1099",
	        "case_id": "e7503a51-6647-4cc2-80dd-645d0df4db43",
	        "entity_submitter_id": "TCGA-AG-A008-10A-01D-A003-01"
	      },
	      {
	        "category": "Item flagged DNU",
	        "status": "Approved",
	        "entity_id": "d1f35d46-c6c9-4cff-ad95-e86d88b38b51",
	        "classification": "CenterNotification",
	        "entity_type": "aliquot",
	        "created_datetime": 1414794925,
	        "annotation_id": "c6a9e076-bb56-5dd9-89e7-c340594fa8f7",
	        "notes": "SDRF in broad.mit.edu_COAD.Genome_Wide_SNP_6.mage-tab.1.2010.0 flagged aliquot to be excluded for analysis based on file 'SNORT_p_TCGA_b89_SNP_N_GenomeWideSNP_6_E05_777376.birdseed.data.txt'.",
	        "creator": "DCC",
	        "submitter_id": "23507",
	        "case_id": "57b0f89f-1b75-453e-922c-01cd4d44ca49",
	        "entity_submitter_id": "TCGA-CK-5914-10A-01D-1649-01"
	      }
	    ],
	    "pagination": {
	      "count": 2,
	      "sort": "",
	      "from": 1,
	      "pages": 12296,
	      "total": 24592,
	      "page": 1,
	      "size": 2
	    }
	  },
	  "warnings": {}
	}
```

##### \_mapping Endpoint

Each Search and Retrieval endpoint is equipped with a ```_mapping``` endpoint that provides information about elements that can be used to query the Search and Retrieval endpoint.

The API response to a `_mapping` query is a list of objects, containing fields available through the API. The high-level structure of the response is as follows:

	"\_mapping": {}
	, "defaults": []
	, "expand": []
	, "fields": []
	, "multi": []
	, "nested": []

###### Example

```shell
curl 'https://gdc-api.nci.nih.gov/projects/_mapping'
```
```output
{
	...

	  "_mapping": {
	    "projects.disease_type": {
	      "doc_type": "projects",
	      "field": "disease_type",
	      "type": "id"
	    },
	    "projects.name": {
	      "doc_type": "projects",
	      "field": "name",
	      "type": "id"
	    }
	  }

	...

}
```

Similar information can be obtained using the `fields` parameter; `fields` queries provide additional information in the response, such as the name of the Elastic Search document (`doc_type`), the field name and the type of value. A list of supported types (such as `string`, `long`, `float`, ...) can be obtained from [Elastic Search Documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html).


#### Query Parameters

The following query parameters can be used with all methods and resources in the GDC API. The use of any particular parameter is optional except where noted.

+-----------+---------+--------------------------------------------------------------------------------------+
| Parameter | Default | Description                                                                          |
+===========+=========+======================================================================================+
| facets    | false   | Provides a list document counts for each included facet                              |
+-----------+---------+--------------------------------------------------------------------------------------+
| fields    | false   | Query option to specify which fields to include in the response                      |
+-----------+---------+--------------------------------------------------------------------------------------+
| filters   | false   | Query option filters specify criteria for the returned response                      |
+-----------+---------+--------------------------------------------------------------------------------------+
| from      | false   | Specifies the first record to return from the set resulting of a query               |
+-----------+---------+--------------------------------------------------------------------------------------+
| size      | false   | determines the number of results to return                                           |
+-----------+---------+--------------------------------------------------------------------------------------+
| sort      | false   | specifies a field to sort the returned results by sort order: + use asc for          |
|           |         | ascending order + use des for descending order                                       |
+-----------+---------+--------------------------------------------------------------------------------------+
| pretty    | false   | Returns response with indentations and line breaks in a human-readable format        |
+-----------+---------+--------------------------------------------------------------------------------------+
| format    | false   | Returns response in XML or TSV format, JSON is default                               |
+-----------+---------+--------------------------------------------------------------------------------------+

##### Facets
The `facets` query parameter provides aggregated data based on a search query. In the simplest case, a terms facet can return facet counts for various facet values for a specific field.

###### Example

To get a count of projects in each program, `facets=program.name` can be passed to the `projects` endpoint.

A list of all valid _field_ names that can be used as facets is available in Appendix A.

```shell
curl  'https://gdc-api.nci.nih.gov/projects?facets=program.name&from=1&size=0&sort=program.name:asc&pretty=true'
```
```python
import requests
import json

projects_endpt = 'https://gdc-api.nci.nih.gov/projects'
params = {'facets':'program.name',
          'from':1, 'size':0,
          'sort':'program.name:asc'}
response = requests.get(projects_endpt, params = params)
print json.dumps(response.json(), indent=2)
```
``` Output

	{
	  "data": {
		"pagination": {
		  "count": 0,
		  "sort": "program.name:asc",
		  "from": 1,
		  "pages": 46,
		  "total": 46,
		  "page": 1,
		  "size": 0
		},
		"hits": [],
		"aggregations": {
		  "program.name": {
			"buckets": [
			  {
				"key": "TCGA",
				"doc_count": 37
			  },
			  {
				"key": "TARGET",
				"doc_count": 9
			  }
			]
		  }
		}
	  },
	  "warnings": {}
	}
```


##### Fields

This query option specifies which fields to include in the response. Using fields can help improve performance. A complete listing of all valid fields for each endpoint type are available in Appendix A.

###### Example

To get back only the file names for each file, `fields=file_name` can be passed to the `files` endpoint.

```shell
curl 'https://gdc-api.nci.nih.gov/files?fields=file_name&pretty=true'
```
```python
import requests
import json

files_endpt = 'https://gdc-api.nci.nih.gov/files'
params = {'fields':'file_name'}
response = requests.get(files_endpt, params = params)
print json.dumps(response.json(), indent=2)
```
``` Output
	{
	  "data": {
		"hits": [
		  {
			"file_name": "Collagen_VI-R-V_GBL1112757.tif"
		  },
		  {
			"file_name": "DUNGS_p_TCGA_b84_115_SNP_N_GenomeWideSNP_6_C09_771624.birdseed.data.txt"
		  },
		  {
			"file_name": "unc.edu.ba350477-3c49-4258-8409-f39447687497.2145690.junction_quantification.txt"
		  },
		  {
			"file_name": "SWEDE_p_TCGAb322_23_24_25_26NSP_GenomeWideSNP_6_C06_1364960.hg18.seg.txt"
		  },
		  {
			"file_name": "unc.edu.a696be4d-8576-43a3-8137-30778dff9b89.2445604.junction_quantification.txt"
		  },
		  {
			"file_name": "MSK_252152921979_S01_CGH-v4_10_27Aug08__GCN_V3_A1__CBS_out.txt"
		  },
		  {
			"file_name": "9721366028_R05C01_Red.idat"
		  },
		  {
			"file_name": "28bdce76404c4a5a9a766c6e93f390ed.bam"
		  },
		  {
			"file_name": "PKC-delta_pS664-R-V_GBL9016761.tif"
		  },
		  {
			"file_name": "jhu-usc.edu_LAML.HumanMethylation450.2.lvl-2.TCGA-AB-3011-03A-01D-0742-05.txt"
		  }
		],
		"pagination": {
		  "count": 10,
		  "sort": "",
		  "from": 1,
		  "pages": 54777,
		  "total": 547761,
		  "page": 1,
		  "size": 10
		}
	  },
	  "warnings": {}
	}
```

##### Filters

Using the query option `filters` lets users specify criteria for the returned response. The `filters` syntax is a JSON object that contains the query filters that are translatable to Elastic Search JSON-based queries used by the GDC middleware. Users can get a list of available values for a specific field in the filter by making a call to the appropriate API endpoint using the `facets` parameter.


###### Filtering Operators

Operators allow users to define query conditions. These can be used to restrict facet values and then to connect these in logical statements.

Operators can relate an operation to one field (Single Field Operators, e.g. A = B) or multiple fields (e.g. [and (a,b,c,d)].

Operators (**op** in the examples in Section 6.2) can take different values depending of the context and type of data.

+--------------------------+------------------------------------------------------------------------------+
| Type                     | Possible Values                                                              |
+==========================+==============================================================================+
| Single field             | =, != , <, <=, =, >, >=, in, is, not, range, exclude                         |
+--------------------------+------------------------------------------------------------------------------+
| Multiple fields          | and, or                                                                      |
+--------------------------+------------------------------------------------------------------------------+

When using multiple fields, operator content requires nested data containing additional operators.

###### Example

To get a list of available values for the `clinical.gender` field, users can query the cases endpoint using the `facets` parameter:

```shell
curl 'https://gdc-api.nci.nih.gov/cases?facets=clinical.gender&from=1&size=0&sort=clinical.gender:asc&pretty=true'
```
```python
import requests
import json

cases_endpt = 'https://gdc-api.nci.nih.gov/cases'
params = {'facets':'clinical.gender',
          'from':1, 'size':0,
          'sort':'clinical.gender:asc'}
response = requests.get(cases_endpt, params = params)
print json.dumps(response.json(), indent=2)
```
``` Output
{
	"data": {
	"pagination": {
		"count": 0,
		"sort": "clinical.gender:asc",
		"from": 1,
		"pages": 14052,
		"total": 14052,
		"page": 1,
		"size": 0
	},
	"hits": [],
	"aggregations": {
		"clinical.gender": {
		"buckets": [
			{
			"key": "female",
			"doc_count": 6598
			},
			{
			"key": "male",
			"doc_count": 6303
			},
			{
			"key": "_missing",
			"doc_count": 1151
			}
		]
		}
	}
	},
	"warnings": {}
}
```

###### Nested Operations

Filters support complex nested operations as well as simple queries on a single field. There are different types of operations available for many uses. For more examples see Additional Examples.

It is possible to obtain multiple values from multiple fields in one single query, e.g. `(facets=field1,field2)`.

###### Example

This example returns `male` cases.

The JSON object to be passed to the `filter` parameter looks like:

	{"op": "=",
		  "content": {
			  "field": "cases.clinical.gender",
			  "value": ["male"]
		  }
	}

URL-encoding the above JSON object (see [Tools](Getting_Started.md#tools-for-communicating-with-the-gdc-api)) results in the following string:

	%7b%22op%22%3a+%22%3d%22%2c%0d%0a++++++%22content%22%3a+%7b%0d%0a++++++++++%22field%22%3a+%22cases.clinical.gender%22%2c%0d%0a++++++++++%22value%22%3a+%5b%22male%22%5d%0d%0a++++++%7d%0d%0a%7d

The above string can now be passed to the `filters` parameter in an API call:

```shell
 curl  'https://gdc-api.nci.nih.gov/cases?filters=%7b%22op%22%3a+%22%3d%22%2c%0d%0a++++++%22content%22%3a+%7b%0d%0a++++++++++%22field%22%3a+%22cases.clinical.gender%22%2c%0d%0a++++++++++%22value%22%3a+%5b%22male%22%5d%0d%0a++++++%7d%0d%0a%7d&pretty=true'
```
```python
import requests
import json
cases_endpt = 'https://gdc-api.nci.nih.gov/cases'
filt = {"op":"=",
        "content":{
            "field": "cases.clinical.gender",
            "value": ["male"]
        }
}
params = {'filters':json.dumps(filt), 'sort':'clinical.gender:asc'}
### requests URL-encodes automatically
response = requests.get(cases_endpt, params = params)
print json.dumps(response.json(), indent=2)
```
``` Output
{
  "data": {
    "hits": [
      {
        "sample_ids": "4cea843f-80ae-4284-b70f-8989717eee7c",
        "portion_ids": "eda1ff5e-a9e4-472a-8231-1a39ac2d2157",
        "submitter_portion_ids": "TCGA-KL-8344-01A-11",
        "submitter_aliquot_ids": "TCGA-KL-8344-01A-11W-2331-10",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-KL-8344-01A-11R",
        "analyte_ids": "f18fe926-0fb3-465b-98a5-40734ad550f9",
        "submitter_id": "TCGA-KL-8344",
        "case_id": "a5af1391-89d3-4f41-930e-7e8272afec98",
        "slide_ids": "58b31314-ca6e-450f-9fb2-f43e9fb27fc8",
        "submitter_sample_ids": "TCGA-KL-8344-01A",
        "project_id": "TCGA-KICH",
        "aliquot_ids": "3820fe10-c8a9-4250-b88d-07a511cf2751",
        "submitter_slide_ids": "TCGA-KL-8344-01A-01-TS1"
      },
      {
        "sample_ids": "70e1edd0-29a3-493a-8e03-107a5b00a4d7",
        "portion_ids": "a0e13920-f019-44b1-83c6-e8a2e508b315",
        "submitter_portion_ids": "TCGA-FA-A4XK-10A-01",
        "submitter_aliquot_ids": "TCGA-FA-A4XK-10A-01D-A31H-26",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-FA-A4XK-10A-01D",
        "analyte_ids": "521d5cb7-a976-4805-9855-4fc63378ee49",
        "submitter_id": "TCGA-FA-A4XK",
        "case_id": "a5b188f0-a6d3-4d4a-b04f-36d47ec05338",
        "slide_ids": "2b0fc256-4d70-4eb6-97e0-152ab7f6039e",
        "submitter_sample_ids": "TCGA-FA-A4XK-10A",
        "project_id": "TCGA-DLBC",
        "aliquot_ids": "8e020cb7-dab9-42b8-8ffe-c01fe58e0151",
        "submitter_slide_ids": "TCGA-FA-A4XK-01A-01-TSA"
      },
      {
        "sample_ids": "815ffaae-31a8-4064-b51a-17123a21e9e6",
        "portion_ids": "8c066e1f-1ed8-4ccb-8348-2a991ebe896b",
        "submitter_portion_ids": "TCGA-EF-5830-01A-21-1934-20",
        "submitter_aliquot_ids": "TCGA-EF-5830-01A-01D-1657-10",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-EF-5830-01A-01R",
        "analyte_ids": "bc9064c9-5af2-44ca-ab25-c01ffe03142c",
        "submitter_id": "TCGA-EF-5830",
        "case_id": "0b6b1937-4024-4f2c-aeca-46387277755f",
        "slide_ids": "b237171d-d2c7-413a-8c56-6ec374de9149",
        "submitter_sample_ids": "TCGA-EF-5830-01A",
        "project_id": "TCGA-READ",
        "aliquot_ids": "61fe838a-d218-407a-922a-7cb9b4fc8aa8",
        "submitter_slide_ids": "TCGA-EF-5830-01A-01-BS1"
      },
      {
        "sample_ids": "077bda39-7c8c-4b20-9036-53487f512299",
        "portion_ids": "adf04f1f-ad12-431e-9b7e-0afa49c3400c",
        "submitter_portion_ids": "TCGA-A3-A6NN-10A-01",
        "submitter_aliquot_ids": "TCGA-A3-A6NN-10A-01D-A33K-10",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-A3-A6NN-10A-01D",
        "analyte_ids": "f8a21ea5-10af-4a0b-809b-52c6053e842e",
        "submitter_id": "TCGA-A3-A6NN",
        "case_id": "060b2104-a015-400e-86c6-6febfb02bbd3",
        "slide_ids": "6a83abea-7ace-4df3-83a6-cf4f0dd05850",
        "submitter_sample_ids": "TCGA-A3-A6NN-10A",
        "project_id": "TCGA-KIRC",
        "aliquot_ids": "56cad354-34c7-417f-b806-391caa999cb8",
        "submitter_slide_ids": "TCGA-A3-A6NN-01A-01-TS1"
      },
      {
        "sample_ids": "45c9117d-f512-46d5-b330-9c9b12627c31",
        "portion_ids": "b16079d1-d585-48da-acb2-5c398e78400c",
        "submitter_portion_ids": "TCGA-2Z-A9JD-10A-01",
        "submitter_aliquot_ids": "TCGA-2Z-A9JD-10A-01D-A42L-01",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-2Z-A9JD-10A-01D",
        "analyte_ids": "4b4d1bd0-a299-4093-8da8-8c008dfb6ff6",
        "submitter_id": "TCGA-2Z-A9JD",
        "case_id": "cff68090-09df-492b-874c-0caeb29f9361",
        "slide_ids": "4acf7a4c-ce0e-40d3-841e-84b1ea3e55aa",
        "submitter_sample_ids": "TCGA-2Z-A9JD-10A",
        "project_id": "TCGA-KIRP",
        "aliquot_ids": "1a98795b-767e-45ac-9e0f-f50ab97a76df",
        "submitter_slide_ids": "TCGA-2Z-A9JD-01A-01-TS1"
      },
      {
        "sample_ids": "a3e7242d-47a7-44a3-9cf0-357d398a9735",
        "portion_ids": "1a7c879c-1486-4e86-883f-d25ba8c699f7",
        "submitter_portion_ids": "TCGA-EB-A5VU-01A-21",
        "submitter_aliquot_ids": "TCGA-EB-A5VU-01A-21R-A32K-13",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-EB-A5VU-01A-21R",
        "analyte_ids": "230b97aa-76d2-479a-be09-5910c0a10f92",
        "submitter_id": "TCGA-EB-A5VU",
        "case_id": "b6ee9305-c935-4692-81f3-956956d5b4c4",
        "slide_ids": "ed27865d-f0b4-46e8-ae93-a85ae6c6b7c3",
        "submitter_sample_ids": "TCGA-EB-A5VU-01A",
        "project_id": "TCGA-SKCM",
        "aliquot_ids": "d4d3ac8a-9d06-489f-a644-db77770e6dfb",
        "submitter_slide_ids": "TCGA-EB-A5VU-01A-02-TSB"
      },
      {
        "sample_ids": "30f43a40-040f-4c42-a84e-0ba7ec9c8945",
        "portion_ids": "28feac7b-f5ef-4a20-9b46-ca42e51fac15",
        "submitter_portion_ids": "TCGA-KR-A7K8-01A-11",
        "submitter_aliquot_ids": "TCGA-KR-A7K8-01A-11D-A33K-10",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-KR-A7K8-01A-11D",
        "analyte_ids": "32ab0de2-a816-44be-b9e9-f81f83e07dda",
        "submitter_id": "TCGA-KR-A7K8",
        "case_id": "4b0e544c-4090-4ebb-b3e5-2623aa91356c",
        "slide_ids": "c1708f35-0cce-4ac5-9af1-48682b756b24",
        "submitter_sample_ids": "TCGA-KR-A7K8-01A",
        "project_id": "TCGA-LIHC",
        "aliquot_ids": "a4fc5ba8-74ba-4047-8857-5d6d6cbc978b",
        "submitter_slide_ids": "TCGA-KR-A7K8-01A-01-TS1"
      },
      {
        "sample_ids": "3eae6b68-d333-4b36-9e70-d2bed19c1dfa",
        "portion_ids": "25222281-b9bd-49b2-a66e-a1ab930ef2d0",
        "submitter_portion_ids": "TCGA-EJ-5510-01A-01",
        "submitter_aliquot_ids": "TCGA-EJ-5510-01A-01R-1579-13",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-EJ-5510-01A-01R",
        "analyte_ids": "b252b7eb-c317-417d-99c3-c21f19a5512a",
        "submitter_id": "TCGA-EJ-5510",
        "case_id": "4a3d9efe-f24e-4135-8a70-e202651e7a81",
        "slide_ids": "a01a6b12-1019-4b95-8a1e-d2ad1848c9af",
        "submitter_sample_ids": "TCGA-EJ-5510-01A",
        "project_id": "TCGA-PRAD",
        "aliquot_ids": "7c0db1d7-66a9-4e71-8c97-005d9a15cb76",
        "submitter_slide_ids": "TCGA-EJ-5510-01A-01-TS1"
      },
      {
        "sample_ids": "4b13bcc0-d9ff-4616-b6cf-543a86881828",
        "portion_ids": "fc4e2d10-6b8e-447d-9757-0d125bd78b02",
        "submitter_portion_ids": "TCGA-AA-3979-01A-01",
        "submitter_aliquot_ids": "TCGA-AA-3979-01A-01D-1637-02",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-AA-3979-01A-01X",
        "analyte_ids": "d77c659b-5d0e-4ee7-ab70-ab938a271438",
        "submitter_id": "TCGA-AA-3979",
        "case_id": "af17788e-a562-43aa-bd36-fd3e031f483c",
        "slide_ids": "93a2c329-a9fe-44de-9115-82b433434b54",
        "submitter_sample_ids": "TCGA-AA-3979-01A",
        "project_id": "TCGA-COAD",
        "aliquot_ids": "5e52933c-840a-4feb-adbe-9d0cfe69e939",
        "submitter_slide_ids": "TCGA-AA-3979-01A-01-TS1"
      },
      {
        "sample_ids": "ef1ab6b8-af5e-4d24-a035-9e4e636e6be7",
        "portion_ids": "253a641f-1814-4b56-8f48-491ad508f770",
        "submitter_portion_ids": "TCGA-BQ-5877-11A-01",
        "submitter_aliquot_ids": "TCGA-BQ-5877-11A-01R-1591-13",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-BQ-5877-11A-01W",
        "analyte_ids": "4797d59e-1d9b-48b8-9e91-779d374f941f",
        "submitter_id": "TCGA-BQ-5877",
        "case_id": "53d40ba3-c33b-4139-967d-5110884237a3",
        "slide_ids": "e769ffb2-da9b-4f8a-abb3-4c84d9c71bd8",
        "submitter_sample_ids": "TCGA-BQ-5877-11A",
        "project_id": "TCGA-KIRP",
        "aliquot_ids": "97f70a79-624f-495c-adb5-723399d2249b",
        "submitter_slide_ids": "TCGA-BQ-5877-11A-01-TS1"
      }
    ],
    "pagination": {
      "count": 10,
      "sort": "",
      "from": 1,
      "page": 1,
      "total": 6303,
      "pages": 631,
      "size": 10
    }
  },
  "warnings": {}
}
```

More in depth examples of various filter types supported in GDC are available in the Appendix A


##### From

The GDC API uses pagination, the `from` query parameter specifies the first record to return out of the set of results. For example, if there are 20 cases returned from the `case` endpoint, `from` can be set to 10 and results 10-20 will be returned. The `from` parameter can be used in conjunction with the `size` parameter to return a specific subset of results. For more information see [Filters](#filters) examples.


###### Example

Getting 5 file results starting from the 100th result from a set of 500.

``` Shell
curl 'https://gdc-api.nci.nih.gov/files?fields=file_name&from=101&size=5&pretty=true'
```
``` Python
import requests
import json

files_endpt = 'https://gdc-api.nci.nih.gov/files'
params = {'fields':'file_name',
          'from':101, 'size':5}
response = requests.get(files_endpt, params = params)
print json.dumps(response.json(), indent=2)

```
``` Output
{
  "data": {
    "hits": [
      {
        "file_name": "unc.edu.956590e9-4962-497b-a59f-81ee0a1c0caf.1379536.junction_quantification.txt"
      },
      {
        "file_name": "MATZO_p_TCGAb40_SNP_1N_GenomeWideSNP_6_G09_667760.ismpolish.data.txt"
      },
      {
        "file_name": "GIRTH_p_TCGA_b108_137_SNP_N_GenomeWideSNP_6_D06_787864.hg18.seg.txt"
      },
      {
        "file_name": "PLENA_p_TCGAb63and64_SNP_N_GenomeWideSNP_6_B12_697382.CEL"
      },
      {
        "file_name": "TCGA-HU-8604-01A-11R-2402-13.isoform.quantification.txt"
      }
    ],
    "pagination": {
      "count": 5,
      "sort": "",
      "from": 100,
      "pages": 109553,
      "total": 547761,
      "page": 21,
      "size": 5
    }
  },
  "warnings": {}
}
```

##### Size

The `size` query parameter specifies the number of results to return. When `size` is not specified the default is 10.

###### Example

This example returns the names of the first two files:

``` Shell
curl 'https://gdc-api.nci.nih.gov/files?fields=file_name&from=0&size=2&pretty=true'
```
``` Python
import requests
import json

files_endpt = 'https://gdc-api.nci.nih.gov/files'
params = {'fields':'file_name',
          'from':0, 'size':2}
response = requests.get(files_endpt, params = params)
print json.dumps(response.json(), indent=2)

```
``` Output
{
  "data": {
    "hits": [
      {
        "file_name": "unc.edu.276a1e00-cf3a-4463-a97b-d544381219ea.2363081.rsem.isoforms.normalized_results"
      },
      {
        "file_name": "nationwidechildrens.org_clinical.TCGA-EY-A5W2.xml"
      }
    ],
    "pagination": {
      "count": 2,
      "sort": "",
      "from": 1,
      "pages": 300936,
      "total": 601872,
      "page": 1,
      "size": 2
    }
  },
  "warnings": {}
}
```

##### Sort

The `sort` query parameter sorts the results by a specific field, and with the sort direction specified using the `:asc` (ascending) or `:dsc` (descending) prefix, e.g. `sort=field:dsc`.

###### Example

Sort cases by submitter_id in ascending order:

``` shell
curl  'https://gdc-api.nci.nih.gov/cases?fields=submitter_id&sort=submitter_id:asc&pretty=true'
```
``` python
import requests
import json

cases_endpt = 'https://gdc-api.nci.nih.gov/cases'
params = {'fields':'submitter_id',
          'sort':'submitter_id:asc'}
response = requests.get(cases_endpt, params = params)
print json.dumps(response.json(), indent=2)

```
``` Output
{
  "data": {
    "hits": [
      {
        "submitter_id": "TARGET-20-PABGKN"
      },
      {
        "submitter_id": "TARGET-20-PABHET"
      },
      {
        "submitter_id": "TARGET-20-PABHKY"
      },
      {
        "submitter_id": "TARGET-20-PABLDZ"
      },
      {
        "submitter_id": "TARGET-20-PACDZR"
      },
      {
        "submitter_id": "TARGET-20-PACEGD"
      },
      {
        "submitter_id": "TARGET-20-PADDXZ"
      },
      {
        "submitter_id": "TARGET-20-PADYIR"
      },
      {
        "submitter_id": "TARGET-20-PADZCG"
      },
      {
        "submitter_id": "TARGET-20-PADZKD"
      }
    ],
    "pagination": {
      "count": 10,
      "sort": "submitter_id.raw:asc",
      "from": 1,
      "pages": 1406,
      "total": 14052,
      "page": 1,
      "size": 10
    }
  },
  "warnings": {}
}
```

##### Pretty

Returns response with indentations and line breaks in a human-readable format.

###### Example: pretty=false

```Shell
curl  'https://gdc-api.nci.nih.gov/cases?fields=submitter_id&sort=submitter_id:asc&size=5'
```
```Output
{"data": {"hits": [{"submitter_id": "TARGET-20-PABGKN"}, {"submitter_id": "TARGET-20-PABHET"}, {"submitter_id": "TARGET-20-PABHKY"}, {"submitter_id": "TARGET-20-PABLDZ"}, {"submitter_id": "TARGET-20-PACDZR"}], "pagination": {"count": 5, "sort": "submitter_id.raw:asc", "from": 1, "pages": 2811, "total": 14052, "page": 1, "size": 5}}, "warnings": {}}
```

######  Example: pretty=true

Same query as above with pretty=true returns a more human-readable format

```Shell
curl  'https://gdc-api.nci.nih.gov/cases?fields=submitter_id&sort=submitter_id:asc&size=5&pretty=true'
```
```Output
{
  "data": {
    "hits": [
      {
        "submitter_id": "TARGET-20-PABGKN"
      },
      {
        "submitter_id": "TARGET-20-PABHET"
      },
      {
        "submitter_id": "TARGET-20-PABHKY"
      },
      {
        "submitter_id": "TARGET-20-PABLDZ"
      },
      {
        "submitter_id": "TARGET-20-PACDZR"
      }
    ],
    "pagination": {
      "count": 5,
      "sort": "submitter_id.raw:asc",
      "from": 1,
      "pages": 2811,
      "total": 14052,
      "page": 1,
      "size": 5
    }
  },
  "warnings": {}
}
```

##### Format

Specifies the format of the API response. JSON is default, and `TSV` and `XML` options are available.

###### Example: TSV

A query with `format=TSV` returns results in a tab separated values (TSV) format.

```shell
curl  'https://gdc-api.nci.nih.gov/cases?fields=submitter_id&size=5&format=TSV'
```
```python
import requests

cases_endpt = 'https://gdc-api.nci.nih.gov/cases'
params = {'fields':'submitter_id',
          'format':'TSV'}
response = requests.get(cases_endpt, params = params)
print response.content
```
```Output
submitter_id
TCGA-RC-A6M6
TCGA-B6-A0RV
TCGA-MB-A5Y8
TCGA-BQ-5876
TCGA-Z6-A9VB
```

###### Example: XML

A query with `format=XML` returns results in XML format:

```shell
curl  'https://gdc-api.nci.nih.gov/cases?fields=submitter_id&size=5&format=XML&pretty=true'
```
```python
import requests

cases_endpt = 'https://gdc-api.nci.nih.gov/cases'
params = {'fields':'submitter_id',
          'format':'XML',
          'pretty':'true'}
response = requests.get(cases_endpt, params = params)
print response.content
```
```Output
<?xml version="1.0" ?>
<response>
	<data>
		<hits>
			<item>
				<submitter_id>TCGA-MQ-A4LV</submitter_id>
			</item>
			<item>
				<submitter_id>TCGA-N9-A4Q1</submitter_id>
			</item>
			<item>
				<submitter_id>TCGA-78-7154</submitter_id>
			</item>
			<item>
				<submitter_id>TCGA-S7-A7WX</submitter_id>
			</item>
			<item>
				<submitter_id>TCGA-XF-AAML</submitter_id>
			</item>
		</hits>
		<pagination>
			<count>5</count>
			<sort/>
			<from>1</from>
			<pages>2811</pages>
			<total>14052</total>
			<page>1</page>
			<size>5</size>
		</pagination>
	</data>
	<warnings/>
</response>
```

## Downloading Files

### Downloading Files

GDC API's `data` endpoint allows users to download files stored in the GDC. Each file in GDC is assigned a Universally Unique Identifier (UUID). File UUIDs can be obtained from the GDC Data Portal in the form of individual UUIDs or as a manifest file that lists UUIDs of a group of files.

To download a file, users can pass individual UUID(s) to the `data` endpoint. If a single UUID is provided, the API will return the associated file. If a comma-separated list of UUIDs is provided, the API will return a single compressed (gzip) TAR file.

**Note:** Downloading controlled access data requires the use of a token. See Authentication and Authorization.

#### Downloading a Single File

To download a single file from the GDC, pass its UUID to the data endpoint.

```shell
curl -O -J 'https://gdc-api.nci.nih.gov/data/96487cd7-8fa8-4bee-9863-17004a70b2e9'
```
```Output
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 6111k  100 6111k    0     0   414k      0  0:00:14  0:00:14 --:--:--  412k
curl: Saved to filename '14-3-3_beta-R-V_GBL1112940.tif'
```

#### Downloading Multiple Files

To download multiple files from the GDC, provide a comma-separated list of UUIDs to the `data` endpoint. The GDC API will return a `.tar.gz` archive containing the downloaded files.

```shell
curl -O -J 'https://gdc-api.nci.nih.gov/data/96487cd7-8fa8-4bee-9863-17004a70b2e9,5e55748f-61fa-43e8-886f-6f1ec7a91af6'
```
```Output
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 10.1M    0 10.1M    0     0   341k      0 --:--:--  0:00:30 --:--:--  283k
curl: Saved to filename 'gdc_download_cfbc1fe89d423c5dc60b5eecf12b797d14553d17.tar.gz'
```

#### Downloading Controlled-access Files

To download controlled-access files, a valid authentication token must be passed to the GDC API using the `X-Auth-Token` HTTP header:

``` shell
export token=ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTOKEN-01234567890+AlPhAnUmErIcToKeN=0123456789-ALPHANUMERICTO

curl -O -J -H "X-Auth-Token: $token" 'https://gdc-api.nci.nih.gov/data/a1c1b23b-cc41-4e85-b1b7-62a42873c5af'
```
```Output
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 31.4M  100 31.4M    0     0   290k      0  0:01:50  0:01:50 --:--:--  172k
curl: Saved to filename 'ACOLD_p_TCGA_Batch17_SNP_N_GenomeWideSNP_6_A03_466078.tangent.copynumber.data.txt'
```

## BAM Slicing

### BAM Slicing

The GDC API provides BAM slicing functionality via the `slicing` endpoint. It enables remote slicing of BAM files, using a syntax similar to that of widely used bioinformatics tools such as `samtools`.

**NOTE:** Authentication is handled in the same manner as with data download,
via the `X-Auth-Token` header. See [Downloading Controlled-access Files](Downloading_Files.md#downloading-controlled-access-files)

#### GET and POST Queries

The `slicing` endpoint accepts HTTP `GET` requests in the form of a URL, and HTTP `POST` requests that carry a JSON payload. `POST` requests are more appropriate in cases where query parameters make the `GET` URL very long.


```GET
GET /v0/slicing/view/fd2386b3-32f5-4aea-a55c-af24f5d1e650?region=chr1&region=chr2:1000&region=chr3:1000-2000 HTTP/1.1
X-Auth-Token: <gdc-user-token>
```
```POST
POST /v0/slicing/view/fd2386b3-32f5-4aea-a55c-af24f5d1e650 HTTP/1.1
Content-Type: application/json
X-Auth-Token: <gdc-user-token>

{
    "regions": [
        "chr1",
        "chr2:1000",
        "chr3:1000-2000"
    ]
}
```
```Response
Response:
HTTP/1.1 206

<bam_data_stream>
```

#### Response
The response will be a BAM-formatted file containing the header of the source BAM file, as well as any alignment records that are found to overlap the specified regions, sorted by chromosomal coordinate.

**NOTE:** The functionality of this API differs from the usual functionality of `samtools` in that alignment records that overlap multiple regions will not be returned multiple times.

#### Query Parameters
The following query parameters and JSON fields are supported:

+------------------------------------------------+--------------------------------------------------------+
| Query Parameter                                | JSON Field                                             |
+================================================+========================================================+
| **region:** a chromosomal-coordinate region    | region=<chr>(:<start>(-<stop>)?)?</stop></start></chr> |
+------------------------------------------------+--------------------------------------------------------+
| **bai:** an overriding GDC BAI ID to be used   | bai=<gdc_bai_id></gdc_bai_id>                          |
| for region lookup                              |                                                        |
+------------------------------------------------+--------------------------------------------------------+


JSON payloads can be syntactically verified using the following JSON schema:

	{
	    "type": "object",
	    "properties": {
	        "bai": {
	            "type": "string"
	        },
	        "regions": {
	            "type": "array",
	            "items": {
	                "type": "string",
	                "pattern": "^[a-zA-Z0-9]+(:[0-9]+(-[0-9]+)?)?$"
	            }
	        }
	    },
	    "additionalProperties": false
	}


A request with no regions specified will return the BAM header, which makes it easy to inspect the references to which the alignment records were aligned.

**NOTE:** A request for regions that are not included in the source BAM is not considered an error, and is treated the same as if no records existed for the region.

#### Errors

When slicing cannot be performed, the GDC API will provide JSON error responses and HTTP error codes.

##### JSON Error Responses

JSON error responses have the following structure:

	{
	    "error": "<error-message>"
	}

For example, when making a request for a protected BAM without supplying a GDC authentication token:

```Shell
curl https://api-gdc.nci.nih.gov/v0/slicing/view/fd2386b3-32f5-4aea-a55c-af24f5d1e650
```
```Response
HTTP/1.1 403 FORBIDDEN
{
    "error": "Please specify a X-Auth-Token"
}
```

##### HTTP error codes

Potential HTTP error codes include:

+----------------+----------------------------------------------------------------------------------------+
| Error Code     | Description                                                                            |
+================+========================================================================================+
| 400            | Bad Request -- The regions specified are malformed                                     |
+----------------+----------------------------------------------------------------------------------------+
| 403            | Unauthorized -- The user could not be authenticated                                    |
+----------------+----------------------------------------------------------------------------------------+
| 403            | Unauthorized -- The user is not authorized for access to the source BAM                |
+----------------+----------------------------------------------------------------------------------------+
| 404            | Not Found -- No BAM is specified                                                       |
+----------------+----------------------------------------------------------------------------------------+
| 404            | Not Found -- No BAM can be found for the specified GDC BAM ID                          |
+----------------+----------------------------------------------------------------------------------------+
| 504            | BAI Not Found -- No BAI can be found for the BAM                                       |
+----------------+----------------------------------------------------------------------------------------+


##### Transfer Errors

In the case that an error occurs during transfer of the resulting BAM, the BGZF EOF marker will not be present. This early truncation of the BAM file will cause errors if the file is used as input to other programs. For example, `samtools` will provide the error "EOF marker is absent".

Early truncation can arise when:

- Connection is interrupted
- Slicing fails due to BAM corruption

## Submission

### Submission

#### Overview

The GDC Submission API uses methods and endpoints that are distinct from those that drive the functionality of the GDC Data Portal. In particular, data and metadata that is in the process of being submitted can only be queried using GraphQL.

This section describes the GDC API's submission functionality, including methods for submitting, deleting, updating, searching, and retrieving data and metadata.

#### Submission endpoint

##### Constructing the endpoint URL

The endpoint for submitting data to a specific project in GDC is constructed as follows:
<pre>https://gdc-api.nci.nih.gov/<b>[&#x3C;API_version&#x3E;/]</b>submission/<b>&#x3C;Program.name&#x3E;</b>/<b>&#x3C;Project.code&#x3E;</b>/</pre>
where `<API_version>/]` is the optional API version component (see [Getting Started).

##### Program.name and Project.code

The values of `Program.name` and `Project.code` can be obtained from the project URL on the GDC Data Submission Portal:

<pre>https://gdc-portal.nci.nih.gov/submission/<b>&#x3C;Program.name&#x3E;</b>/<b>&#x3C;Project.code&#x3E;</b>/dashboard</pre>

##### Example

For example, a project with GDC Data Submission Portal URL

<pre>https://gdc-portal.nci.nih.gov/submission/<b>TCGA</b>/<b>ALCH</b>/dashboard</pre>

would have a versioned submission endpoint at

<pre>https://gdc-api.nci.nih.gov/<b>v0/</b>submission/<b>TCGA</b>/<b>ALCH</b></pre>

and an unversioned submission endpoint at

<pre>https://gdc-api.nci.nih.gov/submission/<b>TCGA</b>/<b>ALCH</b></pre>

#### GDC Dictionary

Requests to the submission API must adhere to the schemas defined in the GDC Data Dictionary.

#### Working with Entities

##### Query Format

When updating, creating, or deleting entities in the GDC, users need to specify the entity `type`, the entity `id`, any relationships the entity has to parent entities from which it was derived, and any properties (required and optional as defined by the entity schema). The structure for each entity should look as follows:

```json
{
    "type": string,
    "id": string,
    "submitter_id": string,
    "<entity_property_keys>": any type,
    "<relationship_name>": [
        {
            "id": string,
            "submitter_id": string
        },
        ...
    ]
}
```

The request must specify either an `id` or a `submitter_id`.

**`id`** : A string specifying the id of the entity the user is creating, updating, or deleting. This is the official GDC UUID for the entity. If it is prefered to refer to the entity using a custom id, users can do so with the `submitter_id` field (described below).

**`submitter_id`** : A string specifying the custom id of the object the user is creating, updating or deleting. This is not the official GDC ID for the entity.

**`<entity_property_keys>`** : All keys except for `id` and `submitter_id` will be treated as properties keys. These key value pairs will be used as properties on referenced entity.

**`<relationship_name>`** : A JSON object specifying a relationship. The value for this is a JSON object specifying either the submitter_id or the id of the neighboring entity.

##### Response Format

The following fields are included in all API responses to submission requests.

```json
{
	"code": int,
	"created_entity_count": int,
	"entities": [object],
	"entity_error_count": int,
	"message": string,
	"success": boolean,
	"transactional_error_count": int,
	"transactional_errors": [transactional_error],
	"updated_entity_count": int
}
```

**success** A boolean value stating whether the transaction was successful. If the value is False, then no changes will be made to the database.

**code** The HTTP status code of the response message. A human readable summary of the transaction results.

**transactional_errors** A list of transactional errors that have occurred. These errors are errors that are not specific to
an individual entity. Transactional errors are of the form:

```json
{
	"message": string
}
```

**`transactional_error_count`** A count of the number of transactional errors that occured.

**`entity_error_count`** A count of the number of entities that were not successful.

**entities** A list of entities of the form:

```json
{
	"submitter_id": string,
	"errors": [entity_errors],
	"id": string,
	"valid": boolean,
	"type": string
}
```

**entity_errors**

A list of errors that occurred while parsing, validating, or performing a CRUD operation on a
specific entity. Entity errors are of the form:

```json
{
	"keys": [string],
	"message": string
}
```

For a listing of the types of errors, see Creating Entities.

**`created_entity_count`** The number of entities created by the transaction.

**`updated_entity_count`** The number of existing entities updated by the transaction.

##### Creating Entities

Entities can be created via both the POST and PUT HTTP methods.

**When to use POST:** Submitters should use the POST method
when creating new entities. The POST method will ensure that the entities in the posted transaction have not
previously been created. This helps to avoid inadvertent updates that can occur when using PUT.

**When to use PUT:** Submitters should use the PUT method to update
existing entities and/or create new ones. The PUT method will create entities that have not been previously created and update those that have been previously created. The response body will specify whether each entity in the transaction was created or updated.

Requests to create/update entities are transactional, meaning that if a single entity is invalid, the transaction will fail and no changes will be made to the database.

`POST /v0/submission/<program>/<project>/` This endpoint is used to create GDC entities. Using the POST on a projectâ€™s endpoint will
create any valid entities specified in the request body.

**Parameters**

* program (str) â€“ The program to which the submitter belongs and the context in
which the API request is valid. The program is the human-readable name, e.g.
TCGA.

* project (str) â€“ The project to which the submitter belongs and the context in
which The API request is valid. The project is the human-readable code, e.g.
BRCA.

**Example Usage:**

The following example will:

1. Create a new aliquot *aliquot-1*.

2. Specify that *aliquot-1* was derived from analyte *analyte-1*.

3. Specify that *analyte-1* was derived from existing portion *portion-1*.

```
	POST /v0/submission/program1/project1/ HTTP/1.1
	Host: example.com
	Content-Type: application/json
	X-Auth-Header: MIIDKgYJKoZIhvcNAQcC...
	Accept: application/json
```

```json
[
    {
        "type": "analyte",
        "portions": {
            "submitter_id": "portion-1"
        },
        "well_number": null,
        "analyte_type": "DNA",
        "submitter_id": "analyte-1",
        "amount": 10.98,
        "a260_a280_ratio": null,
        "concentration": 0.14,
        "spectrophotometer_method": "PicoGreen",
        "analyte_type_id": "D"
    }, {
        "type": "aliquot",
        "analytes": {
            "submitter_id": "analyte-1"
        },
        "submitter_id": "aliquot-1",
        "amount": null,
        "source_center": "23",
        "concentration": 0.07
    }
]
```

**Example Successful Response:**

```
HTTP/1.1 201 CREATED
Content-Type: application/json
```

```json
{
    "code": 201,
    "created_entity_count": 1,
    "entities": [
        {
            "submitter_id": "analyte-1",
            "errors": [],
            "id": "2e1429d5-b2ec-4c02-93ac-207d10b1193c",
            "valid": true,
            "type": "analyte"
        }, {
            "submitter_id": "aliquot-1",
            "errors": [],
            "id": "6a30b20a-1e38-4c16-8c16-c03ab30f7a11",
            "valid": true,
            "type": "aliquot"
        }
    ],
    "entity_error_count": 0,
    "message": "Transaction successful.",
    "success": true,
    "transactional_error_count": 0,
    "transactional_errors": [],
    "updated_entity_count": 0
}
```

**Successful Example Response:**
In the successful example response, the analyte will be created, assigned ID 2e1429d5... and
linked to portion *portion-1*. The aliquot will be created, assigned an ID and linked to analyte
*analyte-1*. Note that the portion *portion-1* referenced by *analyte-1* above is not included
in the transaction. Part of the validation for the creation of any entity is to check if:

1. The entity it was derived from exists in the current transaction. If the parent entity was in the
transaction, verify that any information provided does not conflict with the existing version.

2. If the parent entity was not in the transaction, verify that it already exists in the system.

Just as the portion referenced by *portion-1* was submitted in a previous transaction. This example could have
been split into two transactions, the first creating the aliquot and the second creating the file.

**Note:** GDC will not allow submitters to create entities that do not have relationships to either existing entities in GDC or entities included in the submission transaction. For example, users cannot submit an aliquot if users are not submitting/have not previously
submitted the sample, portion, or analyte from which it was derived. This rule
applies to deleting entries as well (7.2.6 - Deleting Entities.) Creation, updates and deletions of Programs and Projects are an administrative functions handled by GDC.

**Example Bad Request:**

```
POST /v0/submission/program1/project1 HTTP/1.1
Host: example.com
Content-Type: application/json
X-Auth-Header: MIIDKgYJKoZIhvcNAQcC...
Accept: application/json
```

```json
[
    {
        "type": "analytes",
        "portions": {
            "submitter_id": "portion-1"
        },
        "well_number": null,
        "analyte_type": "DNA",
        "submitter_id": "analyte-1",
        "amount": 10.98,
        "a260_a280_ratio": null,
        "concentration": 0.14,
        "spectrophotometer_method": "PicoGreen",
        "analyte_type_id": "D"
    }, {
        "type": "aliquot",
        "analytes": {
            "submitter_id": "analyte-1"
        },
        "submitter_id": "aliquot-1",
        "amount": null,
        "source_center": "23",
        "concentration": 0.07
    }
]
```

**Example Error Result:**

```
HTTP/1.1 400 BAD REQUEST
Content-Type: application/json
```

```json
{
    "code": 400,
    "created_entity_count": 0,
    "entities": [
        {
            "submitter_id": "analyte-1",
            "errors": [
                {
                    "keys": ["type"],
                    "message": "Invalid entity type: aliquots. Did you mean 'aliquot'?"
                }
            ],
            "id": "2e1429d5-b2ec-4c02-93ac-207d10b1193c",
            "valid": false,
            "type": "analyte"
        }, {
            "submitter_id": "aliquot-1",
            "errors": [],
            "id": "6a30b20a-1e38-4c16-8c16-c03ab30f7a11",
            "valid": true,
            "type": "aliquot"
        }
    ],
    "entity_error_count": 1,
    "message": "Transaction aborted due to 1 invalid entity.",
    "success": false,
    "transactional_error_count": 0,
    "transactional_errors": [],
    "updated_entity_count": 0
}
```
**Unsuccessful Example Response:**

In the second example response, the API returned error code 400 and each entity with a list of errors.

The GDC API will also return a list of all errors by entity.

##### Retrieving Entities

`GET /v0/submission/<program>/<project>/entities/entity_id_string.` This endpoint is for retrieving existing GDC entities by ID. For more advanced querying on entities or retrieving set of entities, the GraphQL endpoint described in Section 6.4 is recommended.

The return type of a GET on this endpoint is a JSON array containing JSON object elements, each
corresponding to a provided ID. Return results are unordered.

If any ID is not found in the database, a status code of 404 is returned with the missing IDs.

**Parameters**

* **program** (str) â€“ The program to which the case belongs and the context in
which the API request is valid. The program is the human-readable name, e.g.
TCGA.

* **project** (str) â€“ The project to which the case belongs and the context in
which The API request is valid. The project is the human-readable code, e.g.
BRCA.

* **ids** (str) â€“ A comma separated list of ids specifying the entities to retrieve. These
ids may be official GDC ids or project unique submitter_id.

##### Updating Entities

`PUT /v0/submission/<program>/<project>/` This endpoint is used to update/create GDC entities. Using the PUT method on a projectâ€™s endpoint
will, for any valid entities specified in the request body, create those that do not exist and update those
that do.

**Parameters**

* program (str) â€“ The program to which the case belongs and the context in
which the API request is valid. The program is the human-readable name (e.g.
TCGA).

* project (str) â€“ The project to which the case belongs and the context in
which the API request is valid. The project is the human-readable code (e.g.
BRCA).

The request body syntax is the same as the POST method for the same endpoint.

##### Deleting Entities


`DELETE /v0/submission/<program>/<project>/entities/ids`.

The above endpoint is used to delete existing GDC entities. Using DELETE on the a projectâ€™s endpoint will completely delete an entity.

The GDC does not allow deletions or creations that would leave nodes without parents (i.e. nodes that do not have an entity from which they were derived). To prevent catastrophic mistakes the automatic cascading of deletes is not allowed.

To inform the user which entities must be deleted for the target entity to be deleted, the API will respond with a list of entities that must be deleted prior to deleting the target entity.

**Parameters**

* **program** (str) â€“ The program to which the submitter belongs and the context in
which the API request is valid. The program is the human-readable name (e.g.
TCGA).

* **project** (str) â€“ The project to which the submitter belongs and the context in
which the API request is valid. The project is the human-readable code (e.g. BRCA).

* **ids** (str) â€“ A comma separated list of ids specifying the entities to delete. These ids must be official GDC ids.

##### Error Types

**EntityNotFoundError** A referenced entity was not found. This includes both the transaction and the datamodel.

**MissingPropertyError** A required property was not provided.

**ValidationError** A provided property did not pass a validation test.

##### Status Messages

API responses will contain a status for each entity specified in the request:

**Note:** Since GDC API requests are transactional, either all entities will be processed successfully, resulting in a success status message or none will (i.e. one invalid entity will result in the entire transaction being aborted). Information contained in the status code '**error**' can help users resolve issues.

**success**: The desired transaction was sucessful and the entityâ€™s state was modified in the database.

**valid**: The desired transaction was not sucessful, but the trasaction was not aborted because of this entity. Had all other entities in this transaction been valid and there were no internal errors, then the status
of this entity would succeed.

**error**: The desired transaction was not sucessful, and the transaction was in part aborted because of this
entity. This entity did not pass validation or an internal error occured when attempting to complete
the transaction. The error state will be accompanied by a list of errors recorded about the entity
(see label-error-messages).

#### Querying submitted data and metadata using GraphQL

**NOTE:** The GDC Submission API GraphQL service is an authenticated
  resource for which a GDC Authorization Token must be
  provided. Access is limited to authorized submitters.

##### GraphQL Overview

"GraphQL is a query language designed to build client applications by
providing an intuitive and flexible syntax and system for describing
their data requirements and interactions." (from [GraphQL specification](https://facebook.github.io/graphql/)).

GraphQL has proven to be a very effective method of querying the hierarchical
nature of the GDC's graph datamodel.  The `/graphql` endpoint on the
GDC Submission API provides a real-time view of the state of the
entities in a project.

###### Sample GraphQL query

The following is a GraphQL query for a case in project
TCGA-LAML that returns a JSON document containing the `submitter_id` of
the case and of its samples.


```GraphQL
{
    case (project_id: "TCGA-LAML", first: 1) {
         submitter_id
         samples { submitter_id }
    }
}
```
```Response
{
  "data": {
    "case": [
      {
        "samples": [
          {
            "submitter_id": "TCGA-AB-2901-11A"
          },
          {
            "submitter_id": "TCGA-AB-2901-03A"
          }
        ],
        "submitter_id": "TCGA-AB-2901"
      }
    ]
  }
}
```

##### GDC Data Dictionary Usage

All fields defined in the GDC Data Dictionary can be queried using GraphQL.  The
GraphQL schema is generated off of the Data Dictionary.  For example,
if the term `submitter_id` was changed to `alias` for all Sample
Entities, the above query would be updated to contain `samples { alias
}` rather than `samples { submitter_id }`.

##### GraphiQL IDE

GDC provides an [in-browser IDE](https://gdc-portal.nci.nih.gov/submission/graphiql) for exploring
GraphQL. It is an instance of [GraphiQL](https://github.com/graphql/graphiql).

This IDE provides tab-completion and syntax checking using the GraphQL
schema generated from the GDC Data Dictionary.  GraphiQL allows for
easy discoverability of both fields and query filters.


##### API Usage

All authorized submitters (those who have READ permissions on a
project) can access project Entities via the GraphQL endpoint, located
at `/submission/graphql/`.  As with all authorized API requests, the
authorization token (as downloaded from the Portal) is provided in the
request header `X-Auth-Token`

The following example demonstrates a download using `curl` in a Unix
environment with one assumption that users have their token stored in the
environment variable `TOKEN`:

```bash
$ curl -XPOST -H"X-Auth-Token: $TOKEN" "https://gdc-api.nci.nih.gov/v0/submission/graphql/" -d'{"query": "{ aliquot(first: 2) { id }}"}'
```
```Response
{
  "data": {
    "aliquot": [
      {
        "id": "222417ce-fd47-4dcc-b458-e06751097099"
      },
      {
        "id": "7646a246-5b14-4a50-9c12-7c10dba580d1"
      }
    ]
  }
}
```

**NOTE:** Query results will only contain results from
  the projects that the user has READ access to.

**NOTE:** Query results have a default limit of 10 results, to choose
  a different number of results, override the default with `first: X`
  where `X` is the maximum number of desired results.  If `X` is `0`,
  then no limit is applied. (For pagination, see the `offset` argument)


##### Examples

###### Example

GraphQL query for any one case in 'TCGA-LUAD' without Diagnosis information

```JavaScript
{
  case (project_id: "TCGA-LUAD", without_links: ["diagnoses"], first: 1) {
      submitter_id
  }
}
```
```Response
{
  "data": {
    "case": [
      {
        "submitter_id": "TCGA-17-Z050"
      }
    ]
  }
}
```

###### Example

GraphQL query for the number of cases in 'TCGA-LUAD' without Diagnosis information

```JavaScript
{
  _case_count (project_id: "TCGA-LUAD", without_links: ["diagnoses"])
}
```
```Response
{
  "data": {
    "_case_count": 5
  }
}
```

###### Example

Query for the release state of aliquots belonging to case with `submitter_id:
"TCGA-17-Z050"`

```JavaScript
{
  aliquot(with_path_to: {type: "case", submitter_id:"TCGA-17-Z050"}) {
    id release_state
  }
}
```

###### Example

GraphQL query that uses a graphql fragment to get specific properties from two portions
and give them aliases in the response.

```JavaScript
{
  some_portion: portion (first: 1) {
    ...portionProperties
  }
  specific_portion: portion(submitter_id: "TCGA-67-6217-01A-13-2191-20") {
    ...portionProperties
  }
}

fragment portionProperties on portion {
  submitter_id
  is_ffpe
}
```
```Response
{
  "data": {
    "some_portion": [
      {
        "is_ffpe": false,
        "submitter_id": "TCGA-62-A471-10A-01"
      }
    ],
    "specific_portion": [
      {
        "is_ffpe": false,
        "submitter_id": "TCGA-67-6217-01A-13-2191-20"
      }
    ]
  }
}
```

###### Example

GraphQL Query for a case in "TCGA-LUAD" and return a biospecimen tree

```JavaScript
{
  case(project_id: "TCGA-LUAD", first: 1) {
    id
    samples(first: 1) {
      id
      portions(first: 1) {
        id
        analytes(first: 1) {
          id
          aliquots(first: 1) {
            id
          }
        }
      }
    }
  }
}
```
```Response
{
  "data": {
    "case": [
      {
        "id": "19ca36e6-2154-4224-89b1-117a4a4407f6",
        "samples": [
          {
            "id": "5e2625d2-290d-48cd-af5c-27dc8e3c8b6a",
            "portions": [
              {
                "analytes": [
                  {
                    "aliquots": [
                      {
                        "id": "8e1820d5-dcd8-4760-9962-221e2b71d4b9"
                      }
                    ],
                    "id": "6449533c-e52a-4e58-bae7-0732f48153ef"
                  }
                ],
                "id": "26b75643-8fcd-445e-a0e0-9868cac589ea"
              }
            ]
          }
        ]
      }
    ]
  }
}
```

## Additional Examples

### Additional Examples

#### Data Search and Retrieval

##### Endpoint Examples

This section contains additional examples for using endpoints.

###### Project Endpoint Example

This example is a query for Projects contained in GDC. It returns only the first five projects sorted by project name.

```Query
curl 'https://gdc-api.nci.nih.gov/projects?from=1&size=5&sort=project.name:asc&pretty=true'
```
```Response
{
  "data": {
    "hits": [
      {
        "state": "legacy",
        "project_id": "TARGET-AML",
        "primary_site": "Blood",
        "disease_type": "Acute Myeloid Leukemia",
        "name": "Acute Myeloid Leukemia"
      },
      {
        "state": "legacy",
        "project_id": "TCGA-LAML",
        "primary_site": "Blood",
        "disease_type": "Acute Myeloid Leukemia",
        "name": "Acute Myeloid Leukemia"
      },
      {
        "state": "legacy",
        "project_id": "TARGET-AML-IF",
        "primary_site": "Blood",
        "disease_type": "Acute Myeloid Leukemia Induction Failure",
        "name": "Acute Myeloid Leukemia Induction Failure"
      },
      {
        "state": "legacy",
        "project_id": "TARGET-ALL-P2",
        "primary_site": "Blood",
        "disease_type": "Acute Lymphoblastic Leukemia",
        "name": "Acute Lymphoblastic Leukemia - Phase II"
      },
      {
        "state": "legacy",
        "project_id": "TARGET-ALL-P1",
        "primary_site": "Blood",
        "disease_type": "Acute Lymphoblastic Leukemia",
        "name": "Acute Lymphoblastic Leukemia - Phase I"
      }
    ],
    "pagination": {
      "count": 5,
      "sort": "project.name:asc",
      "from": 1,
      "pages": 10,
      "total": 46,
      "page": 1,
      "size": 5
    }
  },
  "warnings": {}
}
```
###### Files Endpoint Example

This example is a query for files contained in GDC. It returns only the first two files, sorted by file size, from smallest to largest.

``` Query
curl 'https://gdc-api.nci.nih.gov/files?from=1&size=2&sort=file_size:asc&pretty=true'
```
```Response
{
  "data": {
    "hits": [
      {
        "state": "legacy",
        "project_id": "TARGET-AML",
        "primary_site": "Blood",
        "disease_type": "Acute Myeloid Leukemia",
        "name": "Acute Myeloid Leukemia"
      },
      {
        "state": "legacy",
        "project_id": "TCGA-LAML",
        "primary_site": "Blood",
        "disease_type": "Acute Myeloid Leukemia",
        "name": "Acute Myeloid Leukemia"
      },
      {
        "state": "legacy",
        "project_id": "TARGET-AML-IF",
        "primary_site": "Blood",
        "disease_type": "Acute Myeloid Leukemia Induction Failure",
        "name": "Acute Myeloid Leukemia Induction Failure"
      },
      {
        "state": "legacy",
        "project_id": "TARGET-ALL-P2",
        "primary_site": "Blood",
        "disease_type": "Acute Lymphoblastic Leukemia",
        "name": "Acute Lymphoblastic Leukemia - Phase II"
      },
      {
        "state": "legacy",
        "project_id": "TARGET-ALL-P1",
        "primary_site": "Blood",
        "disease_type": "Acute Lymphoblastic Leukemia",
        "name": "Acute Lymphoblastic Leukemia - Phase I"
      }
    ],
    "pagination": {
      "count": 5,
      "sort": "project.name:asc",
      "from": 1,
      "pages": 10,
      "total": 46,
      "page": 1,
      "size": 5
    }
  },
  "warnings": {}
}
```

###### Cases Endpoint Example

This example is a query for cases contained in GDC. It returns only the first five files.

```Query
curl 'https://gdc-api.nci.nih.gov/cases?from=1&size=5&pretty=true'
```
```Response
{
  "data": {
    "hits": [
      {
        "sample_ids": "fae164e6-16ed-4547-9872-15d53c79bb45",
        "portion_ids": "0a5fa1fd-aa9b-49d1-8a32-3522271a56e8",
        "submitter_portion_ids": "TCGA-78-7535-10A-01",
        "submitter_aliquot_ids": "TCGA-78-7535-10A-01W-2107-08",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-78-7535-10A-01W",
        "analyte_ids": "14081a57-a8ee-497d-a944-3f24ef8efddb",
        "submitter_id": "TCGA-78-7535",
        "case_id": "46592b7b-6968-42a6-83af-0917c9f4a9a5",
        "submitter_sample_ids": "TCGA-78-7535-10A",
        "aliquot_ids": "22036caf-c6c9-4ad4-8a69-912b8e56aace"
      },
      {
        "sample_ids": "094cf919-3e36-4d9e-9d37-a00ae04736ee",
        "portion_ids": "1a723c9e-ac2e-40fd-b342-6f9fe7795681",
        "submitter_portion_ids": "TCGA-DJ-A2Q9-01A-11-A21M-20",
        "submitter_aliquot_ids": "TCGA-DJ-A2Q9-01A-21R-A18B-13",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-DJ-A2Q9-01A-21R",
        "analyte_ids": "f888f0c4-7f33-4a64-8975-316d88e214b3",
        "submitter_id": "TCGA-DJ-A2Q9",
        "case_id": "061fab24-727a-4551-a205-89eeb9f530ea",
        "submitter_sample_ids": "TCGA-DJ-A2Q9-01A",
        "aliquot_ids": "29c9b306-d3e9-4d09-bc54-21e46f92ad8a"
      },
      {
        "sample_ids": "8a59b137-8e5e-4484-a9a9-65a596a47ef8",
        "portion_ids": "9f590b62-a6ab-489d-92b9-6e7802812a15",
        "submitter_portion_ids": "TCGA-J4-A83I-01A-11",
        "submitter_aliquot_ids": "TCGA-J4-A83I-01A-11W-A447-08",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-J4-A83I-01A-11W",
        "analyte_ids": "f12a0133-c4c3-4240-a013-1ce159cc08f6",
        "submitter_id": "TCGA-J4-A83I",
        "case_id": "5dc7e186-7e01-4a54-8ae8-350dace2297b",
        "submitter_sample_ids": "TCGA-J4-A83I-01A",
        "aliquot_ids": "dffd09c5-965d-45ac-93ca-f4a547d78684"
      },
      {
        "sample_ids": "587bf402-b61b-444d-af40-6f67bb04c323",
        "portion_ids": "b2e05da1-d75d-4075-9704-2efbd7ed51f3",
        "submitter_portion_ids": "TCGA-BG-A0VW-10A-01",
        "submitter_aliquot_ids": "TCGA-BG-A0VW-10A-01D-A122-09",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-BG-A0VW-10A-01W",
        "analyte_ids": "2f3e28c3-60ec-433a-8f13-6466dd68c5ac",
        "submitter_id": "TCGA-BG-A0VW",
        "case_id": "62d71839-4fba-42e9-9929-8d937f0fe287",
        "submitter_sample_ids": "TCGA-BG-A0VW-10A",
        "aliquot_ids": "a9cd1596-89b6-46fd-9864-8a62f47d1f8b"
      },
      {
        "sample_ids": "26a0b6bc-f8aa-45f1-a215-c90e4e840607",
        "portion_ids": "0dfe9858-d9bf-4e75-84f5-cae466ece831",
        "submitter_portion_ids": "TCGA-P4-AAVL-11A-11",
        "submitter_aliquot_ids": "TCGA-P4-AAVL-11A-11D-A42M-10",
        "days_to_index": 0,
        "submitter_analyte_ids": "TCGA-P4-AAVL-11A-11D",
        "analyte_ids": "f310ac58-97b8-4bba-9dab-ae7768185375",
        "submitter_id": "TCGA-P4-AAVL",
        "case_id": "39847790-c951-4f9d-b23c-88c7f44d20a0",
        "submitter_sample_ids": "TCGA-P4-AAVL-11A",
        "aliquot_ids": "fb226698-844d-4a24-86c2-29571549b9bb"
      }
    ],
    "pagination": {
      "count": 5,
      "sort": "",
      "from": 1,
      "pages": 2822,
      "total": 14108,
      "page": 1,
      "size": 5
    }
  },
  "warnings": {}
}
```

###### Annotations Endpoint Example

This example is a query for annotations contained in the GDC. It returns only the first two annotations.

```Query
curl 'https://gdc-api.nci.nih.gov/annotations?from=1&size=2&pretty=true'
```
```Response
{
  "data": {
    "hits": [
      {
        "category": "Item flagged DNU",
        "status": "Approved",
        "entity_id": "2b61b856-b988-43ca-8dc5-9f97600118ec",
        "classification": "CenterNotification",
        "entity_type": "aliquot",
        "created_datetime": 1294525038,
        "annotation_id": "7d01080f-e82d-5e58-98a6-910c041ee2b3",
        "notes": "SDRF in broad.mit.edu_READ.Genome_Wide_SNP_6.mage-tab.1.1003.0 flagged aliquot to be excluded for analysis based on file 'SCENA_p_TCGAb29and30_SNP_N_GenomeWideSNP_6_C04_569122.ismpolish.data.txt'.",
        "creator": "DCC",
        "submitter_id": "1099",
        "case_id": "e7503a51-6647-4cc2-80dd-645d0df4db43",
        "entity_submitter_id": "TCGA-AG-A008-10A-01D-A003-01"
      },
      {
        "category": "Item flagged DNU",
        "status": "Approved",
        "entity_id": "d1f35d46-c6c9-4cff-ad95-e86d88b38b51",
        "classification": "CenterNotification",
        "entity_type": "aliquot",
        "created_datetime": 1414794925,
        "annotation_id": "c6a9e076-bb56-5dd9-89e7-c340594fa8f7",
        "notes": "SDRF in broad.mit.edu_COAD.Genome_Wide_SNP_6.mage-tab.1.2010.0 flagged aliquot to be excluded for analysis based on file 'SNORT_p_TCGA_b89_SNP_N_GenomeWideSNP_6_E05_777376.birdseed.data.txt'.",
        "creator": "DCC",
        "submitter_id": "23507",
        "case_id": "57b0f89f-1b75-453e-922c-01cd4d44ca49",
        "entity_submitter_id": "TCGA-CK-5914-10A-01D-1649-01"
      }
    ],
    "pagination": {
      "count": 2,
      "sort": "",
      "from": 1,
      "pages": 12296,
      "total": 24592,
      "page": 1,
      "size": 2
    }
  },
  "warnings": {}
}
```

##### Filters Examples

This section contains additional examples for using the `filters` parameter.

###### Example: Basic syntax

The following is an example of `filters` syntax, including the JSON object passed to the `filters` parameter, the corresponding API query, and the JSON object returned by the API. The example finds projects where the primary site is Blood.

```Filter
{
  "op": "and",
  "content": [
    {
      "op": "in",
      "content": {
        "field": "primary_site",
        "value": [
          "Blood"
        ]
      }
    }
  ]
}
```
```Query
curl 'https://gdc-api.nci.nih.gov/projects?filters=%7b%0d%0a++%22op%22%3a+%22and%22%2c%0d%0a++%22content%22%3a+%5b%0d%0a++++%7b%0d%0a++++++%22op%22%3a+%22in%22%2c%0d%0a++++++%22content%22%3a+%7b%0d%0a++++++++%22field%22%3a+%22primary_site%22%2c%0d%0a++++++++%22value%22%3a+%5b%0d%0a++++++++++%22Blood%22%0d%0a++++++++%5d%0d%0a++++++%7d%0d%0a++++%7d%0d%0a++%5d%0d%0a%7d&pretty=true'
```
```Response
{
  "data": {
    "hits": [
      {
        "state": "legacy",
        "project_id": "TCGA-LAML",
        "primary_site": "Blood",
        "disease_type": "Acute Myeloid Leukemia",
        "name": "Acute Myeloid Leukemia"
      },
      {
        "dbgap_accession_number": "phs000465",
        "disease_type": "Acute Myeloid Leukemia",
        "state": "legacy",
        "primary_site": "Blood",
        "project_id": "TARGET-AML",
        "name": "Acute Myeloid Leukemia"
      },
      {
        "dbgap_accession_number": "phs000464",
        "disease_type": "Acute Lymphoblastic Leukemia",
        "state": "legacy",
        "primary_site": "Blood",
        "project_id": "TARGET-ALL-P2",
        "name": "Acute Lymphoblastic Leukemia - Phase II"
      },
      {
        "dbgap_accession_number": "phs000515",
        "disease_type": "Acute Myeloid Leukemia Induction Failure",
        "state": "legacy",
        "primary_site": "Blood",
        "project_id": "TARGET-AML-IF",
        "name": "Acute Myeloid Leukemia Induction Failure"
      },
      {
        "state": "legacy",
        "project_id": "TCGA-LCML",
        "primary_site": "Blood",
        "disease_type": "Chronic Myelogenous Leukemia",
        "name": "Chronic Myelogenous Leukemia"
      },
      {
        "dbgap_accession_number": "phs000463",
        "disease_type": "Acute Lymphoblastic Leukemia",
        "state": "legacy",
        "primary_site": "Blood",
        "project_id": "TARGET-ALL-P1",
        "name": "Acute Lymphoblastic Leukemia - Phase I"
      }
    ],
    "pagination": {
      "count": 6,
      "sort": "",
      "from": 1,
      "page": 1,
      "total": 6,
      "pages": 1,
      "size": 10
    }
  },
  "warnings": {}
}
```

###### Example: Filter cases keeping only 'male'

This is an example of a value-based filter:


```Filter
{
   "op" : "=" ,
   "content" : {
       "field" : "cases.clinical.gender" ,
       "value" : [ "male" ]
   }
}
```
```Query
curl 'https://gdc-api.nci.nih.gov/cases?filters=%7b%0d%0a+++%22op%22+%3a+%22%3d%22+%2c%0d%0a+++%22content%22+%3a+%7b%0d%0a+++++++%22field%22+%3a+%22cases.clinical.gender%22+%2c%0d%0a+++++++%22value%22+%3a+%5b+%22male%22+%5d%0d%0a+++%7d%0d%0a%7d%0d%0a&fields=clinical.gender,case_id&pretty=true'
```

###### Example: Filter using a range

This is an example of filtering for age at diagnosis. The request is for cases where the age at diagnosis is between 40 and 70 years. *Note:* `age_at_diagnosis` is expressed in days.

```Filter
{
    "op": "and",
    "content": [
        {
            "op": ">=",
            "content": {
                "field": "cases.clinical.age_at_diagnosis",
                "value": [
                    14600
                ]
            }
        },
        {
            "op": "<=",
            "content": {
                "field": "cases.clinical.age_at_diagnosis",
                "value": [
                    25550
                ]
            }
        }
    ]
}
```
```Query
curl 'https://gdc-api.nci.nih.gov/cases?filters=%7B%22op%22:%22and%22,%22content%22:%5B%7B%22op%22:%22%3E%3D%22,%22content%22:%7B%22field%22:%22cases.clinical.age_at_diagnosis%22,%22value%22:%5B14600%5D%7D%7D,%7B%22op%22:%22%3C%3D%22,%22content%22:%7B%22field%22:%22cases.clinical.age_at_diagnosis%22,%22value%22:%5B25550%5D%7D%7D%5D%7D&fields=clinical.age_at_diagnosis,case_id&pretty=true'
```


###### Example: Multiple fields

Filter projects for primary_site being Kidney or Brain and program.name being TCGA

```Filter
{
     "op" : "and" ,
     "content" : [{
             "op" : "in" ,
             "content" : {
                 "field" : "primary_site" ,
                 "value" : [
                     "Kidney" ,
                     "Brain"
                 ]
             }
         }, {
             "op" : "in" ,
             "content" : {
                 "field" : "program.name" ,
                 "value" : [
                     "TCGA"
                 ]
             }
         }]
}
```
```Query
curl 'https://gdc-api.nci.nih.gov/projects?filters=%7B%22op%22%3A%22and%22%2C%22content%22%3A%5B%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22primary_site%22%2C%22value%22%3A%5B%22Kidney%22%2C%22Brain%22%5D%7D%7D%2C%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22program.name%22%2C%22value%22%3A%5B%22TCGA%22%5D%7D%7D%5D%7D&pretty=true'
```

## Appendix A - Available Fields

### Appendix A: Available Fields

There are about 2,000 fields available in the GDC data model that are accessible via the GDC API. A list of fields for each endpoint is below.

#### Project Fields

+------------------------------------------------------------------------------------------------------+
| Field Name                                                                                           |
+======================================================================================================+
| name                                                                                                 |
+------------------------------------------------------------------------------------------------------+
| state                                                                                                |
+------------------------------------------------------------------------------------------------------+
| program.name                                                                                         |
+------------------------------------------------------------------------------------------------------+
| program.program_id                                                                                   |
+------------------------------------------------------------------------------------------------------+
| primary_site                                                                                         |
+------------------------------------------------------------------------------------------------------+
| project_id                                                                                           |
+------------------------------------------------------------------------------------------------------+
| disease_type                                                                                         |
+------------------------------------------------------------------------------------------------------+
| summary.file_count                                                                                   |
+------------------------------------------------------------------------------------------------------+
| summary.data_types.file_count                                                                        |
+------------------------------------------------------------------------------------------------------+
| summary.data_types.case_count                                                                        |
+------------------------------------------------------------------------------------------------------+
| summary.data_types.data_type                                                                         |
+------------------------------------------------------------------------------------------------------+
| summary.experimental_strategies.file_count                                                           |
+------------------------------------------------------------------------------------------------------+
| summary.experimental_strategies.case_count                                                           |
+------------------------------------------------------------------------------------------------------+
| summary.experimental_strategies.experimental_strategy                                                |
+------------------------------------------------------------------------------------------------------+
| summary.case_count                                                                                   |
+------------------------------------------------------------------------------------------------------+
| summary.file_size                                                                                    |
+------------------------------------------------------------------------------------------------------+


#### File Fields


| Field Name |
| --- |
| file_id |
| file_size |
| state |
| access |
| acl |
| data_type |
| data_subtype |
| data_format |
| platform |
| experimental_strategy |
| tags |
| uploaded_datetime |
| published_datetime |
| state_comment |
| md5sum |
| submitter_id |
| archive.archive_id |
| archive.revision |
| archive.submitter_id |
| cases.files.file_name |
| cases.files.md5sum |
| cases.files.submitter_id |
| cases.files.state |
| cases.files.file_id |
| cases.files.file_size |
| cases.files.state_comment |
| cases.annotations.category |
| cases.annotations.status |
| cases.annotations.classification |
| cases.annotations.creator |
| cases.annotations.created_datetime |
| cases.annotations.notes |
| cases.annotations.submitter_id |
| cases.annotations.item_type |
| cases.annotations.case_id |
| cases.annotations.item_id |
| cases.annotations.annotation_id |
| cases.days_to_index |
| cases.submitter_id |
| cases.project.name |
| cases.project.state |
| cases.project.program.name |
| cases.project.program.program_id |
| cases.project.primary_site |
| cases.project.project_id |
| cases.project.disease_type |
| cases.clinical.year_of_diagnosis |
| cases.clinical.clinical_id |
| cases.clinical.gender |
| cases.clinical.race |
| cases.clinical.age_at_diagnosis |
| cases.clinical.icd_10 |
| cases.clinical.vital_status |
| cases.clinical.days_to_death |
| cases.clinical.ethnicity |
| cases.metadata_files.data_type |
| cases.metadata_files.file_name |
| cases.metadata_files.md5sum |
| cases.metadata_files.submitter_id |
| cases.metadata_files.state |
| cases.metadata_files.data_subtype |
| cases.metadata_files.file_id |
| cases.metadata_files.file_size |
| cases.metadata_files.acl |
| cases.metadata_files.state_comment |
| cases.samples.sample_type_id |
| cases.samples.pathology_report_uuid |
| cases.samples.portions.creation_datetime |
| cases.samples.portions.portion_number |
| cases.samples.portions.weight |
| cases.samples.portions.analytes.well_number |
| cases.samples.portions.analytes.analyte_type |
| cases.samples.portions.analytes.submitter_id |
| cases.samples.portions.analytes.analyte_id |
| cases.samples.portions.analytes.amount |
| cases.samples.portions.analytes.aliquots.center.code |
| cases.samples.portions.analytes.aliquots.center.name |
| cases.samples.portions.analytes.aliquots.center.short_name |
| cases.samples.portions.analytes.aliquots.center.namespace |
| cases.samples.portions.analytes.aliquots.center.center_id |
| cases.samples.portions.analytes.aliquots.center.center_type |
| cases.samples.portions.analytes.aliquots.submitter_id |
| cases.samples.portions.analytes.aliquots.amount |
| cases.samples.portions.analytes.aliquots.aliquot_id |
| cases.samples.portions.analytes.aliquots.concentration |
| cases.samples.portions.analytes.aliquots.source_center |
| cases.samples.portions.analytes.aliquots.annotations.category |
| cases.samples.portions.analytes.aliquots.annotations.status |
| cases.samples.portions.analytes.aliquots.annotations.classification |
| cases.samples.portions.analytes.aliquots.annotations.creator |
| cases.samples.portions.analytes.aliquots.annotations.created_datetime |
| cases.samples.portions.analytes.aliquots.annotations.notes |
| cases.samples.portions.analytes.aliquots.annotations.submitter_id |
| cases.samples.portions.analytes.aliquots.annotations.item_type |
| cases.samples.portions.analytes.aliquots.annotations.case_id |
| cases.samples.portions.analytes.aliquots.annotations.item_id |
| cases.samples.portions.analytes.aliquots.annotations.annotation_id |
| cases.samples.portions.analytes.a260_a280_ratio |
| cases.samples.portions.analytes.concentration |
| cases.samples.portions.analytes.spectrophotometer_method |
| cases.samples.portions.analytes.analyte_type_id |
| cases.samples.portions.analytes.annotations.category |
| cases.samples.portions.analytes.annotations.status |
| cases.samples.portions.analytes.annotations.classification |
| cases.samples.portions.analytes.annotations.creator |
| cases.samples.portions.analytes.annotations.created_datetime |
| cases.samples.portions.analytes.annotations.notes |
| cases.samples.portions.analytes.annotations.submitter_id |
| cases.samples.portions.analytes.annotations.item_type |
| cases.samples.portions.analytes.annotations.case_id |
| cases.samples.portions.analytes.annotations.item_id |
| cases.samples.portions.analytes.annotations.annotation_id |
| cases.samples.portions.submitter_id |
| cases.samples.portions.slides.percent_tumor_nuclei |
| cases.samples.portions.slides.percent_monocyte_infiltration |
| cases.samples.portions.slides.percent_normal_cells |
| cases.samples.portions.slides.percent_stromal_cells |
| cases.samples.portions.slides.percent_eosinophil_infiltration |
| cases.samples.portions.slides.annotations.category |
| cases.samples.portions.slides.annotations.status |
| cases.samples.portions.slides.annotations.classification |
| cases.samples.portions.slides.annotations.creator |
| cases.samples.portions.slides.annotations.created_datetime |
| cases.samples.portions.slides.annotations.notes |
| cases.samples.portions.slides.annotations.submitter_id |
| cases.samples.portions.slides.annotations.item_type |
| cases.samples.portions.slides.annotations.case_id |
| cases.samples.portions.slides.annotations.item_id |
| cases.samples.portions.slides.annotations.annotation_id |
| cases.samples.portions.slides.percent_lymphocyte_infiltration |
| cases.samples.portions.slides.submitter_id |
| cases.samples.portions.slides.section_location |
| cases.samples.portions.slides.slide_id |
| cases.samples.portions.slides.percent_necrosis |
| cases.samples.portions.slides.percent_granulocyte_infiltration |
| cases.samples.portions.slides.number_proliferating_cells |
| cases.samples.portions.slides.percent_neutrophil_infiltration |
| cases.samples.portions.slides.percent_inflam_infiltration |
| cases.samples.portions.slides.percent_tumor_cells |
| cases.samples.portions.portion_id |
| cases.samples.portions.is_ffpe |
| cases.samples.portions.annotations.category |
| cases.samples.portions.annotations.status |
| cases.samples.portions.annotations.classification |
| cases.samples.portions.annotations.creator |
| cases.samples.portions.annotations.created_datetime |
| cases.samples.portions.annotations.notes |
| cases.samples.portions.annotations.submitter_id |
| cases.samples.portions.annotations.item_type |
| cases.samples.portions.annotations.case_id |
| cases.samples.portions.annotations.item_id |
| cases.samples.portions.annotations.annotation_id |
| cases.samples.portions.center.code |
| cases.samples.portions.center.name |
| cases.samples.portions.center.short_name |
| cases.samples.portions.center.namespace |
| cases.samples.portions.center.center_id |
| cases.samples.portions.center.center_type |
| cases.samples.time_between_clamping_and_freezing |
| cases.samples.time_between_excision_and_freezing |
| cases.samples.shortest_dimension |
| cases.samples.oct_embedded |
| cases.samples.tumor_code_id |
| cases.samples.tumor_code |
| cases.samples.sample_type |
| cases.samples.submitter_id |
| cases.samples.days_to_collection |
| cases.samples.intermediate_dimension |
| cases.samples.days_to_sample_procurement |
| cases.samples.sample_id |
| cases.samples.initial_weight |
| cases.samples.freezing_method |
| cases.samples.current_weight |
| cases.samples.annotations.category |
| cases.samples.annotations.status |
| cases.samples.annotations.classification |
| cases.samples.annotations.creator |
| cases.samples.annotations.created_datetime |
| cases.samples.annotations.notes |
| cases.samples.annotations.submitter_id |
| cases.samples.annotations.item_type |
| cases.samples.annotations.case_id |
| cases.samples.annotations.item_id |
| cases.samples.annotations.annotation_id |
| cases.samples.longest_dimension |
| cases.samples.is_ffpe |
| cases.case_id |
| cases.summary.file_count |
| cases.summary.data_types.file_count |
| cases.summary.data_types.data_type |
| cases.summary.experimental_strategies.file_count |
| cases.summary.experimental_strategies.experimental_strategy |
| cases.summary.file_size |
| cases.tissue_source_site.project |
| cases.tissue_source_site.bcr_id |
| cases.tissue_source_site.code |
| cases.tissue_source_site.tissue_source_site_id |
| cases.tissue_source_site.name |
| annotations.category |
| annotations.status |
| annotations.classification |
| annotations.creator |
| annotations.created_datetime |
| annotations.notes |
| annotations.submitter_id |
| annotations.item_type |
| annotations.case_id |
| annotations.item_id |
| annotations.annotation_id |
| related_files.published_datetime |
| related_files.data_type |
| related_files.file_name |
| related_files.md5sum |
| related_files.submitter_id |
| related_files.uploaded_datetime |
| related_files.state |
| related_files.data_subtype |
| related_files.file_id |
| related_files.type |
| related_files.file_size |
| related_files.state_comment |
| center.code |
| center.name |
| center.short_name |
| center.namespace |
| center.center_id |
| center.center_type |
| associated_entities.entity_id |
| associated_entities.entity_type |
| associated_entities.case_id |



#### Case Fields


| Field Name |
| --- |
| case_id |
| days_to_index |
| submitter_id |
| files.file_name |
| files.submitter_id |
| files.file_size |
| files.archive.archive_id |
| files.archive.revision |
| files.archive.submitter_id |
| files.state |
| files.access |
| files.platform |
| files.cases.files.file_name |
| files.cases.files.md5sum |
| files.cases.files.submitter_id |
| files.cases.files.state |
| files.cases.files.file_id |
| files.cases.files.file_size |
| files.cases.files.state_comment |
| files.cases.annotations.category |
| files.cases.annotations.status |
| files.cases.annotations.classification |
| files.cases.annotations.creator |
| files.cases.annotations.created_datetime |
| files.cases.annotations.notes |
| files.cases.annotations.submitter_id |
| files.cases.annotations.item_type |
| files.cases.annotations.case_id |
| files.cases.annotations.item_id |
| files.cases.annotations.annotation_id |
| files.cases.days_to_index |
| files.cases.submitter_id |
| files.cases.project.name |
| files.cases.project.state |
| files.cases.project.program.name |
| files.cases.project.program.program_id |
| files.cases.project.primary_site |
| files.cases.project.project_id |
| files.cases.project.disease_type |
| files.cases.clinical.year_of_diagnosis |
| files.cases.clinical.clinical_id |
| files.cases.clinical.gender |
| files.cases.clinical.race |
| files.cases.clinical.age_at_diagnosis |
| files.cases.clinical.icd_10 |
| files.cases.clinical.vital_status |
| files.cases.clinical.days_to_death |
| files.cases.clinical.ethnicity |
| files.cases.metadata_files.data_type |
| files.cases.metadata_files.file_name |
| files.cases.metadata_files.md5sum |
| files.cases.metadata_files.submitter_id |
| files.cases.metadata_files.state |
| files.cases.metadata_files.data_subtype |
| files.cases.metadata_files.file_id |
| files.cases.metadata_files.file_size |
| files.cases.metadata_files.acl |
| files.cases.metadata_files.state_comment |
| files.cases.samples.sample_type_id |
| files.cases.samples.pathology_report_uuid |
| files.cases.samples.portions.creation_datetime |
| files.cases.samples.portions.portion_number |
| files.cases.samples.portions.weight |
| files.cases.samples.portions.analytes.well_number |
| files.cases.samples.portions.analytes.analyte_type |
| files.cases.samples.portions.analytes.submitter_id |
| files.cases.samples.portions.analytes.analyte_id |
| files.cases.samples.portions.analytes.amount |
| files.cases.samples.portions.analytes.aliquots.center.code |
| files.cases.samples.portions.analytes.aliquots.center.name |
| files.cases.samples.portions.analytes.aliquots.center.short_name |
| files.cases.samples.portions.analytes.aliquots.center.namespace |
| files.cases.samples.portions.analytes.aliquots.center.center_id |
| files.cases.samples.portions.analytes.aliquots.center.center_type |
| files.cases.samples.portions.analytes.aliquots.submitter_id |
| files.cases.samples.portions.analytes.aliquots.amount |
| files.cases.samples.portions.analytes.aliquots.aliquot_id |
| files.cases.samples.portions.analytes.aliquots.concentration |
| files.cases.samples.portions.analytes.aliquots.source_center |
| files.cases.samples.portions.analytes.aliquots.annotations.category |
| files.cases.samples.portions.analytes.aliquots.annotations.status |
| files.cases.samples.portions.analytes.aliquots.annotations.classification |
| files.cases.samples.portions.analytes.aliquots.annotations.creator |
| files.cases.samples.portions.analytes.aliquots.annotations.created_datetime |
| files.cases.samples.portions.analytes.aliquots.annotations.notes |
| files.cases.samples.portions.analytes.aliquots.annotations.submitter_id |
| files.cases.samples.portions.analytes.aliquots.annotations.item_type |
| files.cases.samples.portions.analytes.aliquots.annotations.case_id |
| files.cases.samples.portions.analytes.aliquots.annotations.item_id |
| files.cases.samples.portions.analytes.aliquots.annotations.annotation_id |
| files.cases.samples.portions.analytes.a260_a280_ratio |
| files.cases.samples.portions.analytes.concentration |
| files.cases.samples.portions.analytes.spectrophotometer_method |
| files.cases.samples.portions.analytes.analyte_type_id |
| files.cases.samples.portions.analytes.annotations.category |
| files.cases.samples.portions.analytes.annotations.status |
| files.cases.samples.portions.analytes.annotations.classification |
| files.cases.samples.portions.analytes.annotations.creator |
| files.cases.samples.portions.analytes.annotations.created_datetime |
| files.cases.samples.portions.analytes.annotations.notes |
| files.cases.samples.portions.analytes.annotations.submitter_id |
| files.cases.samples.portions.analytes.annotations.item_type |
| files.cases.samples.portions.analytes.annotations.case_id |
| files.cases.samples.portions.analytes.annotations.item_id |
| files.cases.samples.portions.analytes.annotations.annotation_id |
| files.cases.samples.portions.submitter_id |
| files.cases.samples.portions.slides.percent_tumor_nuclei |
| files.cases.samples.portions.slides.percent_monocyte_infiltration |
| files.cases.samples.portions.slides.percent_normal_cells |
| files.cases.samples.portions.slides.annotations.category |
| files.cases.samples.portions.slides.annotations.status |
| files.cases.samples.portions.slides.annotations.classification |
| files.cases.samples.portions.slides.annotations.creator |
| files.cases.samples.portions.slides.annotations.created_datetime |
| files.cases.samples.portions.slides.annotations.notes |
| files.cases.samples.portions.slides.annotations.submitter_id |
| files.cases.samples.portions.slides.annotations.item_type |
| files.cases.samples.portions.slides.annotations.case_id |
| files.cases.samples.portions.slides.annotations.item_id |
| files.cases.samples.portions.slides.annotations.annotation_id |
| files.cases.samples.portions.slides.submitter_id |
| files.cases.samples.portions.slides.percent_eosinophil_infiltration |
| files.cases.samples.portions.slides.percent_lymphocyte_infiltration |
| files.cases.samples.portions.slides.percent_stromal_cells |
| files.cases.samples.portions.slides.section_location |
| files.cases.samples.portions.slides.slide_id |
| files.cases.samples.portions.slides.percent_necrosis |
| files.cases.samples.portions.slides.percent_granulocyte_infiltration |
| files.cases.samples.portions.slides.percent_inflam_infiltration |
| files.cases.samples.portions.slides.percent_neutrophil_infiltration |
| files.cases.samples.portions.slides.number_proliferating_cells |
| files.cases.samples.portions.slides.percent_tumor_cells |
| files.cases.samples.portions.portion_id |
| files.cases.samples.portions.is_ffpe |
| files.cases.samples.portions.annotations.category |
| files.cases.samples.portions.annotations.status |
| files.cases.samples.portions.annotations.classification |
| files.cases.samples.portions.annotations.creator |
| files.cases.samples.portions.annotations.created_datetime |
| files.cases.samples.portions.annotations.notes |
| files.cases.samples.portions.annotations.submitter_id |
| files.cases.samples.portions.annotations.item_type |
| files.cases.samples.portions.annotations.case_id |
| files.cases.samples.portions.annotations.item_id |
| files.cases.samples.portions.annotations.annotation_id |
| files.cases.samples.portions.center.code |
| files.cases.samples.portions.center.name |
| files.cases.samples.portions.center.short_name |
| files.cases.samples.portions.center.namespace |
| files.cases.samples.portions.center.center_id |
| files.cases.samples.portions.center.center_type |
| files.cases.samples.time_between_clamping_and_freezing |
| files.cases.samples.time_between_excision_and_freezing |
| files.cases.samples.shortest_dimension |
| files.cases.samples.oct_embedded |
| files.cases.samples.tumor_code_id |
| files.cases.samples.tumor_code |
| files.cases.samples.sample_type |
| files.cases.samples.submitter_id |
| files.cases.samples.days_to_collection |
| files.cases.samples.intermediate_dimension |
| files.cases.samples.days_to_sample_procurement |
| files.cases.samples.sample_id |
| files.cases.samples.initial_weight |
| files.cases.samples.freezing_method |
| files.cases.samples.current_weight |
| files.cases.samples.annotations.category |
| files.cases.samples.annotations.status |
| files.cases.samples.annotations.classification |
| files.cases.samples.annotations.creator |
| files.cases.samples.annotations.created_datetime |
| files.cases.samples.annotations.notes |
| files.cases.samples.annotations.submitter_id |
| files.cases.samples.annotations.item_type |
| files.cases.samples.annotations.case_id |
| files.cases.samples.annotations.item_id |
| files.cases.samples.annotations.annotation_id |
| files.cases.samples.longest_dimension |
| files.cases.samples.is_ffpe |
| files.cases.case_id |
| files.cases.summary.file_count |
| files.cases.summary.data_types.file_count |
| files.cases.summary.data_types.data_type |
| files.cases.summary.experimental_strategies.file_count |
| files.cases.summary.experimental_strategies.experimental_strategy |
| files.cases.summary.file_size |
| files.cases.tissue_source_site.project |
| files.cases.tissue_source_site.bcr_id |
| files.cases.tissue_source_site.code |
| files.cases.tissue_source_site.tissue_source_site_id |
| files.cases.tissue_source_site.name |
| files.data_subtype |
| files.annotations.category |
| files.annotations.status |
| files.annotations.classification |
| files.annotations.creator |
| files.annotations.created_datetime |
| files.annotations.notes |
| files.annotations.submitter_id |
| files.annotations.item_type |
| files.annotations.case_id |
| files.annotations.item_id |
| files.annotations.annotation_id |
| files.experimental_strategy |
| files.data_type |
| files.tags |
| files.uploaded_datetime |
| files.file_id |
| files.published_datetime |
| files.state_comment |
| files.related_files.published_datetime |
| files.related_files.data_type |
| files.related_files.file_name |
| files.related_files.md5sum |
| files.related_files.submitter_id |
| files.related_files.uploaded_datetime |
| files.related_files.state |
| files.related_files.data_subtype |
| files.related_files.file_id |
| files.related_files.type |
| files.related_files.file_size |
| files.related_files.state_comment |
| files.center.code |
| files.center.name |
| files.center.short_name |
| files.center.namespace |
| files.center.center_id |
| files.center.center_type |
| files.md5sum |
| files.data_format |
| files.acl |
| files.associated_entities.entity_id |
| files.associated_entities.entity_type |
| files.associated_entities.case_id |
| annotations.category |
| annotations.status |
| annotations.classification |
| annotations.creator |
| annotations.created_datetime |
| annotations.notes |
| annotations.submitter_id |
| annotations.item_type |
| annotations.case_id |
| annotations.item_id |
| annotations.annotation_id |
| project.name |
| project.state |
| project.program.name |
| project.program.program_id |
| project.primary_site |
| project.project_id |
| project.disease_type |
| clinical.year_of_diagnosis |
| clinical.clinical_id |
| clinical.gender |
| clinical.race |
| clinical.age_at_diagnosis |
| clinical.icd_10 |
| clinical.vital_status |
| clinical.days_to_death |
| clinical.ethnicity |
| metadata_files.data_type |
| metadata_files.file_name |
| metadata_files.md5sum |
| metadata_files.submitter_id |
| metadata_files.state |
| metadata_files.data_subtype |
| metadata_files.file_id |
| metadata_files.file_size |
| metadata_files.acl |
| metadata_files.state_comment |
| samples.sample_type_id |
| samples.pathology_report_uuid |
| samples.portions.creation_datetime |
| samples.portions.portion_number |
| samples.portions.weight |
| samples.portions.analytes.well_number |
| samples.portions.analytes.analyte_type |
| samples.portions.analytes.submitter_id |
| samples.portions.analytes.analyte_id |
| samples.portions.analytes.amount |
| samples.portions.analytes.aliquots.center.code |
| samples.portions.analytes.aliquots.center.name |
| samples.portions.analytes.aliquots.center.short_name |
| samples.portions.analytes.aliquots.center.namespace |
| samples.portions.analytes.aliquots.center.center_id |
| samples.portions.analytes.aliquots.center.center_type |
| samples.portions.analytes.aliquots.submitter_id |
| samples.portions.analytes.aliquots.amount |
| samples.portions.analytes.aliquots.aliquot_id |
| samples.portions.analytes.aliquots.concentration |
| samples.portions.analytes.aliquots.source_center |
| samples.portions.analytes.aliquots.annotations.category |
| samples.portions.analytes.aliquots.annotations.status |
| samples.portions.analytes.aliquots.annotations.classification |
| samples.portions.analytes.aliquots.annotations.creator |
| samples.portions.analytes.aliquots.annotations.created_datetime |
| samples.portions.analytes.aliquots.annotations.notes |
| samples.portions.analytes.aliquots.annotations.submitter_id |
| samples.portions.analytes.aliquots.annotations.item_type |
| samples.portions.analytes.aliquots.annotations.case_id |
| samples.portions.analytes.aliquots.annotations.item_id |
| samples.portions.analytes.aliquots.annotations.annotation_id |
| samples.portions.analytes.a260_a280_ratio |
| samples.portions.analytes.concentration |
| samples.portions.analytes.spectrophotometer_method |
| samples.portions.analytes.analyte_type_id |
| samples.portions.analytes.annotations.category |
| samples.portions.analytes.annotations.status |
| samples.portions.analytes.annotations.classification |
| samples.portions.analytes.annotations.creator |
| samples.portions.analytes.annotations.created_datetime |
| samples.portions.analytes.annotations.notes |
| samples.portions.analytes.annotations.submitter_id |
| samples.portions.analytes.annotations.item_type |
| samples.portions.analytes.annotations.case_id |
| samples.portions.analytes.annotations.item_id |
| samples.portions.analytes.annotations.annotation_id |
| samples.portions.submitter_id |
| samples.portions.slides.percent_tumor_nuclei |
| samples.portions.slides.percent_monocyte_infiltration |
| samples.portions.slides.percent_normal_cells |
| samples.portions.slides.annotations.category |
| samples.portions.slides.annotations.status |
| samples.portions.slides.annotations.classification |
| samples.portions.slides.annotations.creator |
| samples.portions.slides.annotations.created_datetime |
| samples.portions.slides.annotations.notes |
| samples.portions.slides.annotations.submitter_id |
| samples.portions.slides.annotations.item_type |
| samples.portions.slides.annotations.case_id |
| samples.portions.slides.annotations.item_id |
| samples.portions.slides.annotations.annotation_id |
| samples.portions.slides.submitter_id |
| samples.portions.slides.percent_eosinophil_infiltration |
| samples.portions.slides.percent_lymphocyte_infiltration |
| samples.portions.slides.percent_stromal_cells |
| samples.portions.slides.section_location |
| samples.portions.slides.slide_id |
| samples.portions.slides.percent_necrosis |
| samples.portions.slides.percent_granulocyte_infiltration |
| samples.portions.slides.percent_inflam_infiltration |
| samples.portions.slides.percent_neutrophil_infiltration |
| samples.portions.slides.number_proliferating_cells |
| samples.portions.slides.percent_tumor_cells |
| samples.portions.portion_id |
| samples.portions.is_ffpe |
| samples.portions.annotations.category |
| samples.portions.annotations.status |
| samples.portions.annotations.classification |
| samples.portions.annotations.creator |
| samples.portions.annotations.created_datetime |
| samples.portions.annotations.notes |
| samples.portions.annotations.submitter_id |
| samples.portions.annotations.item_type |
| samples.portions.annotations.case_id |
| samples.portions.annotations.item_id |
| samples.portions.annotations.annotation_id |
| samples.portions.center.code |
| samples.portions.center.name |
| samples.portions.center.short_name |
| samples.portions.center.namespace |
| samples.portions.center.center_id |
| samples.portions.center.center_type |
| samples.time_between_clamping_and_freezing |
| samples.time_between_excision_and_freezing |
| samples.shortest_dimension |
| samples.oct_embedded |
| samples.tumor_code_id |
| samples.tumor_code |
| samples.sample_type |
| samples.submitter_id |
| samples.days_to_collection |
| samples.intermediate_dimension |
| samples.days_to_sample_procurement |
| samples.sample_id |
| samples.initial_weight |
| samples.freezing_method |
| samples.current_weight |
| samples.annotations.category |
| samples.annotations.status |
| samples.annotations.classification |
| samples.annotations.creator |
| samples.annotations.created_datetime |
| samples.annotations.notes |
| samples.annotations.submitter_id |
| samples.annotations.item_type |
| samples.annotations.case_id |
| samples.annotations.item_id |
| samples.annotations.annotation_id |
| samples.longest_dimension |
| samples.is_ffpe |
| summary.file_count |
| summary.data_types.file_count |
| summary.data_types.data_type |
| summary.experimental_strategies.file_count |
| summary.experimental_strategies.experimental_strategy |
| summary.file_size |
| tissue_source_site.project |
| tissue_source_site.bcr_id |
| tissue_source_site.code |
| tissue_source_site.tissue_source_site_id |
| tissue_source_site.name |


#### Annotation Fields


| Field Name |
| --- |
| annotation_id |
| case_id |
| submitter_id |
| category |
| status |
| classification |
| creator |
| created_datetime |
| notes |
| item_id |
| item_type |
| project.code |
| project.name |
| project.state |
| project.program.name |
| project.program.program_id |
| project.primary_site |
| project.project_id |
| project.disease_type |

## Appendix B - Key Terms

### Appendix B: Key Terms

The following table provides definitions and explanations for terms and acronyms relevant to the content presented within this document.


| Term | Definition |
| --- | --- |
| ACL | Access Control List |
| API | Application Programming Interface |
| BAM | Bidirectional Associative Memory |
| BCR | Biospecimen Core Resource |
| CSV | Comma Seperated Values |
| DCC | Data Coordinating Center |
| eRA | Electronic Research Administration |
| GDC | Genomic Data Commons |
| HTTP | Hypertext Transfer Protocol |
| IDE | Integrated Development Environment |
| JSON | JavaScript Object Notation |
| MAGE-TAB | Microarray Gene Expression - Tabular formatÂ  |
| NCI | National Cancer Institute |
| NIH | National Institutes of Health |
| Op | Operations |
| REST | Representational State TransferÂ  |
| TARGET | Therapeutically Applicable Research to Generate Effective Treatments |
| TCGA | The Cancer Genome Atlas |
| TSV | Tab Seperated Values |
| UUID | Universally Unique Identifier |
| URL | Universal Resource Locator |
| XML | Extensible Markup Language |

## Appendix C - GET to POST Conversion

### Appendix C: GET to POST Conversion

This appendix explains how to use JSONLint and UrlDecode.org for GET to POST Conversion

The first operation consists in breaking up the query below by identifying its parameters

    https://gdc-api.nci.nih.gov/files?filters=%7B%22op%22%3A%22and%22%2C%22content%22%3A%5B%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22cases.clinical.gender%22%2C%22value%22%3A%5B%22female%22%5D%7D%7D%2C%7B%22op%22%3A%22%3E%3D%22%2C%22content%22%3A%7B%22field%22%3A%22cases.clinical.age_at_diagnosis%22%2C%22value%22%3A%5B%229125%22%5D%7D%7D%2C%7B%22op%22%3A%22%3C%3D%22%2C%22content%22%3A%7B%22field%22%3A%22cases.clinical.age_at_diagnosis%22%2C%22value%22%3A%5B%2212775%22%5D%7D%7D%2C%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22cases.project.primary_site%22%2C%22value%22%3A%5B%22Skin%22%5D%7D%7D%2C%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22files.data_format%22%2C%22value%22%3A%5B%22CEL%22%5D%7D%7D%2C%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22cases.case_id%22%2C%22value%22%3A%5B%22ccf8809a-cdfd-46f7-b607-001b8b91c1a4%22%5D%7D%7D%5D%7D&from=1&size=2&fields=file_id,file_size&pretty=true

The following parameters can be identified:

* filters
* from
* size
* fields

**Note**: the pretty paremeter can be discarded at this point, since tools used for POST usually provide JSON parsing.

The resulting skeleton for the POST query would be:

    {
      "from": 1,
      "size": 2,
      "fields": "file_id,file_size",
      "filters": "TBD"
    }

**Note**: Filters being a complex string it has been replaced in the above skeleton by "TBD", this is sufficient to validate the skeleton.

At this point, [JSONLint](http://jsonlint.com/) can be used to ensure the skeleton does not contain errors. Copying the skeleton in [JSONLint](http://jsonlint.com/) query string and clicking "Validate" should return "Valid JSON" at the bottom of the page.

The "filters" parameter contains a complex string:

    %7B%22op%22%3A%22and%22%2C%22content%22%3A%5B%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22cases.clinical.gender%22%2C%22value%22%3A%5B%22female%22%5D%7D%7D%2C%7B%22op%22%3A%22%3E%3D%22%2C%22content%22%3A%7B%22field%22%3A%22cases.clinical.age_at_diagnosis%22%2C%22value%22%3A%5B%229125%22%5D%7D%7D%2C%7B%22op%22%3A%22%3C%3D%22%2C%22content%22%3A%7B%22field%22%3A%22cases.clinical.age_at_diagnosis%22%2C%22value%22%3A%5B%2212775%22%5D%7D%7D%2C%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22cases.project.primary_site%22%2C%22value%22%3A%5B%22Skin%22%5D%7D%7D%2C%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22files.data_format%22%2C%22value%22%3A%5B%22CEL%22%5D%7D%7D%2C%7B%22op%22%3A%22in%22%2C%22content%22%3A%7B%22field%22%3A%22cases.case_id%22%2C%22value%22%3A%5B%22ccf8809a-cdfd-46f7-b607-001b8b91c1a4%22%5D%7D%7D%5D%7D

[UrlDecode.org](http://urldecode.org/) provides the ability to decode this string into a JSON.

    {"op":"and","content":[{"op":"in","content":{"field":"cases.clinical.gender","value":["female"]}},{"op":">=","content":{"field":"cases.clinical.age_at_diagnosis","value":["9125"]}},{"op":"<=","content":{"field":"cases.clinical.age_at_diagnosis","value":["12775"]}},{"op":"in","content":{"field":"cases.project.primary_site","value":["Skin"]}},{"op":"in","content":{"field":"files.data_format","value":["CEL"]}},{"op":"in","content":{"field":"cases.case_id","value":["ccf8809a-cdfd-46f7-b607-001b8b91c1a4"]}}]}

The last action consists in replacing "TBD" in the skeleton with the decoded JSON.

    {
      "from": 1,
      "size": 2,
      "fields": "file_id,file_size",
      "filters": {"op":"and","content":[{"op":"in","content":{"field":"cases.clinical.gender","value":["female"]}},{"op":">=","content":{"field":"cases.clinical.age_at_diagnosis","value":["9125"]}},{"op":"<=","content":{"field":"cases.clinical.age_at_diagnosis","value":["12775"]}},{"op":"in","content":{"field":"cases.project.primary_site","value":["Skin"]}},{"op":"in","content":{"field":"files.data_format","value":["CEL"]}},{"op":"in","content":{"field":"cases.case_id","value":["ccf8809a-cdfd-46f7-b607-001b8b91c1a4"]}}]}
    }

If desired, [JSONLint](http://jsonlint.com/) can be used to prettify the above JSON.

    //https://gdc-api.nci.nih.gov/files
    {
      "from": 1,
      "size": 2,
      "fields": "file_id,file_size",
      "filters": {
        "op": "and",
        "content": [
          {
            "op": "in",
            "content": {
              "field": "cases.clinical.gender",
              "value": [
                "female"
              ]
            }
          },
          {
            "op": ">=",
            "content": {
              "field": "cases.clinical.age_at_diagnosis",
              "value": [
                "9125"
              ]
            }
          },
          {
            "op": "<=",
            "content": {
              "field": "cases.clinical.age_at_diagnosis",
              "value": [
                "12775"
              ]
            }
          },
          {
            "op": "in",
            "content": {
              "field": "cases.project.primary_site",
              "value": [
                "Skin"
              ]
            }
          },
          {
            "op": "in",
            "content": {
              "field": "files.data_format",
              "value": [
                "CEL"
              ]
            }
          },
          {
            "op": "in",
            "content": {
              "field": "cases.case_id",
              "value": [
                "ccf8809a-cdfd-46f7-b607-001b8b91c1a4"
              ]
            }
          }
        ]
      }
    }

## Release Notes

### API Release Notes






#### v0.3.24.1

* __GDC Product__: Application Programming Interface (API)
* __Release Date__: March 1, 2016

##### New Features and Changes

* New entities: *Slide Data Bundle* and *Pathology Data Bundle*
* New `_dictionary/_all` endpoint displays the entire GDC dictionary for the `submission` endpoint, and project-specific dictionaries for project endpoints; e.g. `https://gdc-api.nci.nih.gov/v0/submission/_dictionary/_all` and `https://gdc-api.nci.nih.gov/v0/submission/TCGA/SKCM/_dictionary/_all`.
* Support for releases
* Project `state` property definition has been updated. The property can now have one of six values: `open` (default), `review`, `submitted`, `processing`, `closed`, and `legacy`.
* `days_to_index` property has been removed from `Case`
* `template` endpoint for submissions returns archive of all templates, e.g. `https://gdc-api.nci.nih.gov/v0/submission/TCGA/SKCM/template`
* `template` endpoint can generate JSON using `/template?format=json`
* `export` endpoint now supports POST requests
* GraphQL: lists are accepted as top level property filters
* GraphQL: `not` filter was added

##### Bugs Fixed Since Last Release

* Portion is now linked to Center

##### Known Issues and Workarounds

* None to report

Release details are maintained in the GDC API change log






#### v0.3.20.1

* __GDC Product__: Application Programming Interface (API)
* __Release Date__: January 28, 2016

##### New Features and Changes

* Metadata export support for TSV, CSV and JSON formats, including:
  *  Clinical metadata
  *  Biospecimen metadata
  *  Project and case entities
  *  Annotations
* Export of metadata can be filtered by category
* Support for generating a TSV template
* Additional details are provided in JSON parsing error messages

##### Bugs Fixed Since Last Release

* Biospecimen XML submissions with shipment_portion nodes now parsed correctly
* Correct HTTP code returned upon authentication failure
* API URLs work with and without trailing slash
* Miscellaneous bug fixes

##### Known Issues and Workarounds

*   None to report

Release details are maintained in the GDC API change log






#### v0.2.18

* __GDC Product__: Application Programming Interface (API)
* __Release Date__: November 18, 2015

##### New Features and Changes

*   Added support for molecular data upload.
  *   Users can submit data bundle entities to specify the molecular data and relations to be uploaded.
  *   Users can update existing data by submitting update data bundles.
  *   Manifest files can be downloaded to allow for molecular data upload via the API or Data Transfer Tool.
*   Users can delete previously submitted entities.

##### Bugs Fixed Since Last Release

*   None to report

##### Known Issues and Workarounds

*   None to report

Release details are maintained in the GDC API change log






#### v0.2.18-spr1

* __GDC Product__: Application Programming Interface (API)
* __Release Date__: November 2, 2015

##### New Features and Changes

*   Entity Metadata submission added with support for JSON, CSV, TSV, and XML formats and the following data entities:
    *   Clinical metadata
    *   Biospecimen metadata
    *   Project and case entities
    *   Annotations
*   Dry run option available for metadata submission to validate metadata files prior to submission
*   Submission integrated with authorization to ensure read, create, update, and admin roles can be controlled at the project level

##### Bugs Fixed Since Last Release

*   None to report

##### Known Issues and Workarounds

*   None to report

Release details are maintained in the GDC API change log






#### v0.2.15-oicr1

* __GDC Product__: Application Programming Interface (API)
* __Release Date__: August 7, 2015


##### New Features and Changes

*   None to report

##### Bugs Fixed Since Last Release

*   Addressed an issue in the range aggregation feature (used by facets)

##### Known Issues and Workarounds

*   Query and Download Service
    *   Universal Resource Locator (URL) length is limited.  As such, download requests with many files have to be divided into multiple requests. A feature that allows a payload to specify the file identifiers to download to overcome this limitation is planned for a future release.
    *   All TARGET, CGCI, and CCLE data is currently not available via the GDC API but will be made available as data is continously imported into the GDC
*   Authentication and Authorization Service
    *   Obtaining a token requires browser access. This is a limitation of eRA Commons and not the GDC authorization service. The Security Assertion Markup Language  (SAML) based protocol eRA Commons uses does not support [ECP](https://wiki.shibboleth.net/confluence/display/CONCEPT/ECP) (or similar)

Release details are maintained in the GDC API change log






#### v0.2.13

* __GDC Product__: Application Programming Interface (API)
* __Release Date__: July 23, 2015


##### New Features and Changes

*   Query and Download Service
    *   Implemented server-side related files
    *   Created a quick search endpoint
*   Misc
    *   Added POST support
    *   Added range support (used by range facet)
    *   Hooked-up reports to new reports index

##### Bugs Fixed Since Last Release

*   Query and Download Service
    *   Fixed error (500) on annotations without notes
    *   Correct structure for related files
    *   Fixed error (404) with annotation download
    *   Fixed issue with support for IS NOT operator

##### Known Issues and Workarounds

*   Query and Download Service
    *   Universal Resource Locator (URL) length is limited.  As such, download requests with many files have to be ivided into multiple requests. A feature that allows a payload to specify the file identifiers to download to zovercome this limitation is planned for a future release.
    *   All TARGET, CGCI, and CCLE data is currently not available via the GDC API but will be made available as data is continously imported into the GDC
*   Authentication and Authorization Service
    *   Obtaining a token requires browser access. This is a limitation of eRA Commons and not the GDC authorization service. The Security Assertion Markup Language  (SAML) based protocol eRA Commons uses does not support [ECP](https://wiki.shibboleth.net/confluence/display/CONCEPT/ECP) (or similar)

Release details are maintained in the GDC API change log






#### v0.1.10

* __GDC Product__: Application Programming Interface (API)
* __Release Date__: March 18, 2015


##### New Features and Changes

*   Query and Download Service
    *   Supports query for files, participants, annotations, and projects by metadata. Interfaces with ElasticSearch for efficient queries.
    *   Provides a RESTful interface to support the download of data, metadata, and annotations
    *   Supports the download of multiple files, manifests, or annotations in compressed (gzip) format by default
*   Authentication and Authorization Service
    *   Authenticates users using the GDC authorization service which authorizes against dbGaP
    *   Manages tokens and token-based authorization using OpenStack Keystone
    *   Implements federated authentication with eRA Commons to generate a Keystone token
    *   Downloads Comma Separated Values (CSVs) from dbGaP at regular intervals and verifies authorization using eRA Commons credentials

##### Bugs Fixed Since Last Release

*   Query and Download Service
    *   Initial Release - Not Applicable
*   Authentication and Authorization Service
    *   Further developed the prototype into a production ready service

##### Known Issues and Workarounds

*   Query and Download Service
    *   Universal Resource Locator (URL) length is limited.  As such, download requests with many files have to be divided into multiple requests. A feature that allows a payload to specify the file identifiers to download to overcome this limitation is planned for a future release.
    *   All TARGET, CGCI, and CCLE data is currently not available via the GDC API but will be made available as data is continously imported into the GDC
*   Authentication and Authorization Service
    *   Obtaining a token requires browser access. This is a limitation of eRA Commons and not the GDC authorization service. The Security Assertion Markup Language  (SAML) based protocol eRA Commons uses does not support [ECP](https://wiki.shibboleth.net/confluence/display/CONCEPT/ECP) (or similar)

Release details are maintained in the GDC API change log






#### v0.1.8

* __GDC Product__: Application Programming Interface (API)
* __Release Date__: January 22, 2015


##### New Features and Changes

*   Identity Service ([Signpost](https://github.com/NCI-GDC/signpost))
    *   Provides an internal identity service used for assigning Digital IDs to all GDC data
    *   Tracks the location of data in GDC object stores
*   Authentication and Authorization Service
    *   Provides a prototype service for authenticating using eRA Commons as the identity provider and dbGaP for authorization

##### Bugs Fixed Since Last Release

*   None to report

##### Known Issues and Workarounds

*   Identify Service ([Signpost](https://github.com/NCI-GDC/signpost))
    *   The internal identity service does not support authentication for create, read, update, and delete operations as this is an internal service
*   Authentication and Authorization Service
*   Obtaining a token requires browser access. This is a limitation of eRA Commons, not the GDC authorization service. The SAML based protocol eRA Commons uses does not support [ECP](https://wiki.shibboleth.net/confluence/display/CONCEPT/ECP) (or similar)

Release details are maintained in the GDC API change log.

